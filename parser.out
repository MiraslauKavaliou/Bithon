Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     block -> INDENT statements DEDENT
Rule 3     statements -> statement
Rule 4     statements -> statements statement
Rule 5     statement -> if_statement
Rule 6     statement -> if_else_statement
Rule 7     statement -> def_statement
Rule 8     statement -> loop_statement
Rule 9     statement -> return_statement
Rule 10    statement -> expression_statement
Rule 11    statement -> function_call
Rule 12    statement -> NEWLINE
Rule 13    function_call -> IDENT arg
Rule 14    if_statement -> IFF expression block
Rule 15    if_else_statement -> if_statement else_statement
Rule 16    else_statement -> ELS block
Rule 17    def_statement -> DEF IDENT arg block
Rule 18    arg -> IDENT
Rule 19    arg -> STRING
Rule 20    arg -> NUMBER
Rule 21    arg -> arg IDENT
Rule 22    arg -> <empty>
Rule 23    loop_statement -> LOP IDENT expression expression block
Rule 24    expression -> NUMBER
Rule 25    expression -> STRING
Rule 26    expression -> BOOL
Rule 27    expression -> IDENT
Rule 28    expression -> NOT expression
Rule 29    expression -> function_call
Rule 30    expression -> expression EQUAL expression
Rule 31    expression -> expression PLUS expression
Rule 32    expression -> expression MINUS expression
Rule 33    expression -> expression MUL expression
Rule 34    expression -> expression DIV expression
Rule 35    expression -> expression MODULUS expression
Rule 36    expression -> LPAREN expression RPAREN
Rule 37    return_statement -> RET expression
Rule 38    expression_statement -> expression

Terminals, with rules where they appear

BOOL                 : 26
DEDENT               : 2
DEF                  : 17
DIV                  : 34
ELS                  : 16
EQUAL                : 30
IDENT                : 13 17 18 21 23 27
IFF                  : 14
INDENT               : 2
LOP                  : 23
LPAREN               : 36
MINUS                : 32
MODULUS              : 35
MUL                  : 33
NEWLINE              : 12
NOT                  : 28
NUMBER               : 20 24
PLUS                 : 31
RET                  : 37
RPAREN               : 36
STRING               : 19 25
error                : 

Nonterminals, with rules where they appear

arg                  : 13 17 21
block                : 14 16 17 23
def_statement        : 7
else_statement       : 15
expression           : 14 23 23 28 30 30 31 31 32 32 33 33 34 34 35 35 36 37 38
expression_statement : 10
function_call        : 11 29
if_else_statement    : 6
if_statement         : 5 15
loop_statement       : 8
program              : 0
return_statement     : 9
statement            : 3 4
statements           : 1 2 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statement -> . if_statement
    (6) statement -> . if_else_statement
    (7) statement -> . def_statement
    (8) statement -> . loop_statement
    (9) statement -> . return_statement
    (10) statement -> . expression_statement
    (11) statement -> . function_call
    (12) statement -> . NEWLINE
    (14) if_statement -> . IFF expression block
    (15) if_else_statement -> . if_statement else_statement
    (17) def_statement -> . DEF IDENT arg block
    (23) loop_statement -> . LOP IDENT expression expression block
    (37) return_statement -> . RET expression
    (38) expression_statement -> . expression
    (13) function_call -> . IDENT arg
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 11
    IFF             shift and go to state 12
    DEF             shift and go to state 14
    LOP             shift and go to state 16
    RET             shift and go to state 17
    IDENT           shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    def_statement                  shift and go to state 6
    loop_statement                 shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    function_call                  shift and go to state 10
    expression                     shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (4) statements -> statements . statement
    (5) statement -> . if_statement
    (6) statement -> . if_else_statement
    (7) statement -> . def_statement
    (8) statement -> . loop_statement
    (9) statement -> . return_statement
    (10) statement -> . expression_statement
    (11) statement -> . function_call
    (12) statement -> . NEWLINE
    (14) if_statement -> . IFF expression block
    (15) if_else_statement -> . if_statement else_statement
    (17) def_statement -> . DEF IDENT arg block
    (23) loop_statement -> . LOP IDENT expression expression block
    (37) return_statement -> . RET expression
    (38) expression_statement -> . expression
    (13) function_call -> . IDENT arg
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> statements .)
    NEWLINE         shift and go to state 11
    IFF             shift and go to state 12
    DEF             shift and go to state 14
    LOP             shift and go to state 16
    RET             shift and go to state 17
    IDENT           shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    statement                      shift and go to state 23
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    def_statement                  shift and go to state 6
    loop_statement                 shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    function_call                  shift and go to state 10
    expression                     shift and go to state 13

state 3

    (3) statements -> statement .

    NEWLINE         reduce using rule 3 (statements -> statement .)
    IFF             reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    LOP             reduce using rule 3 (statements -> statement .)
    RET             reduce using rule 3 (statements -> statement .)
    IDENT           reduce using rule 3 (statements -> statement .)
    NUMBER          reduce using rule 3 (statements -> statement .)
    STRING          reduce using rule 3 (statements -> statement .)
    BOOL            reduce using rule 3 (statements -> statement .)
    NOT             reduce using rule 3 (statements -> statement .)
    LPAREN          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    DEDENT          reduce using rule 3 (statements -> statement .)


state 4

    (5) statement -> if_statement .
    (15) if_else_statement -> if_statement . else_statement
    (16) else_statement -> . ELS block

    NEWLINE         reduce using rule 5 (statement -> if_statement .)
    IFF             reduce using rule 5 (statement -> if_statement .)
    DEF             reduce using rule 5 (statement -> if_statement .)
    LOP             reduce using rule 5 (statement -> if_statement .)
    RET             reduce using rule 5 (statement -> if_statement .)
    IDENT           reduce using rule 5 (statement -> if_statement .)
    NUMBER          reduce using rule 5 (statement -> if_statement .)
    STRING          reduce using rule 5 (statement -> if_statement .)
    BOOL            reduce using rule 5 (statement -> if_statement .)
    NOT             reduce using rule 5 (statement -> if_statement .)
    LPAREN          reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    DEDENT          reduce using rule 5 (statement -> if_statement .)
    ELS             shift and go to state 25

    else_statement                 shift and go to state 24

state 5

    (6) statement -> if_else_statement .

    NEWLINE         reduce using rule 6 (statement -> if_else_statement .)
    IFF             reduce using rule 6 (statement -> if_else_statement .)
    DEF             reduce using rule 6 (statement -> if_else_statement .)
    LOP             reduce using rule 6 (statement -> if_else_statement .)
    RET             reduce using rule 6 (statement -> if_else_statement .)
    IDENT           reduce using rule 6 (statement -> if_else_statement .)
    NUMBER          reduce using rule 6 (statement -> if_else_statement .)
    STRING          reduce using rule 6 (statement -> if_else_statement .)
    BOOL            reduce using rule 6 (statement -> if_else_statement .)
    NOT             reduce using rule 6 (statement -> if_else_statement .)
    LPAREN          reduce using rule 6 (statement -> if_else_statement .)
    $end            reduce using rule 6 (statement -> if_else_statement .)
    DEDENT          reduce using rule 6 (statement -> if_else_statement .)


state 6

    (7) statement -> def_statement .

    NEWLINE         reduce using rule 7 (statement -> def_statement .)
    IFF             reduce using rule 7 (statement -> def_statement .)
    DEF             reduce using rule 7 (statement -> def_statement .)
    LOP             reduce using rule 7 (statement -> def_statement .)
    RET             reduce using rule 7 (statement -> def_statement .)
    IDENT           reduce using rule 7 (statement -> def_statement .)
    NUMBER          reduce using rule 7 (statement -> def_statement .)
    STRING          reduce using rule 7 (statement -> def_statement .)
    BOOL            reduce using rule 7 (statement -> def_statement .)
    NOT             reduce using rule 7 (statement -> def_statement .)
    LPAREN          reduce using rule 7 (statement -> def_statement .)
    $end            reduce using rule 7 (statement -> def_statement .)
    DEDENT          reduce using rule 7 (statement -> def_statement .)


state 7

    (8) statement -> loop_statement .

    NEWLINE         reduce using rule 8 (statement -> loop_statement .)
    IFF             reduce using rule 8 (statement -> loop_statement .)
    DEF             reduce using rule 8 (statement -> loop_statement .)
    LOP             reduce using rule 8 (statement -> loop_statement .)
    RET             reduce using rule 8 (statement -> loop_statement .)
    IDENT           reduce using rule 8 (statement -> loop_statement .)
    NUMBER          reduce using rule 8 (statement -> loop_statement .)
    STRING          reduce using rule 8 (statement -> loop_statement .)
    BOOL            reduce using rule 8 (statement -> loop_statement .)
    NOT             reduce using rule 8 (statement -> loop_statement .)
    LPAREN          reduce using rule 8 (statement -> loop_statement .)
    $end            reduce using rule 8 (statement -> loop_statement .)
    DEDENT          reduce using rule 8 (statement -> loop_statement .)


state 8

    (9) statement -> return_statement .

    NEWLINE         reduce using rule 9 (statement -> return_statement .)
    IFF             reduce using rule 9 (statement -> return_statement .)
    DEF             reduce using rule 9 (statement -> return_statement .)
    LOP             reduce using rule 9 (statement -> return_statement .)
    RET             reduce using rule 9 (statement -> return_statement .)
    IDENT           reduce using rule 9 (statement -> return_statement .)
    NUMBER          reduce using rule 9 (statement -> return_statement .)
    STRING          reduce using rule 9 (statement -> return_statement .)
    BOOL            reduce using rule 9 (statement -> return_statement .)
    NOT             reduce using rule 9 (statement -> return_statement .)
    LPAREN          reduce using rule 9 (statement -> return_statement .)
    $end            reduce using rule 9 (statement -> return_statement .)
    DEDENT          reduce using rule 9 (statement -> return_statement .)


state 9

    (10) statement -> expression_statement .

    NEWLINE         reduce using rule 10 (statement -> expression_statement .)
    IFF             reduce using rule 10 (statement -> expression_statement .)
    DEF             reduce using rule 10 (statement -> expression_statement .)
    LOP             reduce using rule 10 (statement -> expression_statement .)
    RET             reduce using rule 10 (statement -> expression_statement .)
    IDENT           reduce using rule 10 (statement -> expression_statement .)
    NUMBER          reduce using rule 10 (statement -> expression_statement .)
    STRING          reduce using rule 10 (statement -> expression_statement .)
    BOOL            reduce using rule 10 (statement -> expression_statement .)
    NOT             reduce using rule 10 (statement -> expression_statement .)
    LPAREN          reduce using rule 10 (statement -> expression_statement .)
    $end            reduce using rule 10 (statement -> expression_statement .)
    DEDENT          reduce using rule 10 (statement -> expression_statement .)


state 10

    (11) statement -> function_call .
    (29) expression -> function_call .

  ! reduce/reduce conflict for NEWLINE resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for IFF resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for LOP resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for RET resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for BOOL resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for $end resolved using rule 11 (statement -> function_call .)
  ! reduce/reduce conflict for DEDENT resolved using rule 11 (statement -> function_call .)
    NEWLINE         reduce using rule 11 (statement -> function_call .)
    IFF             reduce using rule 11 (statement -> function_call .)
    DEF             reduce using rule 11 (statement -> function_call .)
    LOP             reduce using rule 11 (statement -> function_call .)
    RET             reduce using rule 11 (statement -> function_call .)
    IDENT           reduce using rule 11 (statement -> function_call .)
    NUMBER          reduce using rule 11 (statement -> function_call .)
    STRING          reduce using rule 11 (statement -> function_call .)
    BOOL            reduce using rule 11 (statement -> function_call .)
    NOT             reduce using rule 11 (statement -> function_call .)
    LPAREN          reduce using rule 11 (statement -> function_call .)
    $end            reduce using rule 11 (statement -> function_call .)
    DEDENT          reduce using rule 11 (statement -> function_call .)
    EQUAL           reduce using rule 29 (expression -> function_call .)
    PLUS            reduce using rule 29 (expression -> function_call .)
    MINUS           reduce using rule 29 (expression -> function_call .)
    MUL             reduce using rule 29 (expression -> function_call .)
    DIV             reduce using rule 29 (expression -> function_call .)
    MODULUS         reduce using rule 29 (expression -> function_call .)

  ! NEWLINE         [ reduce using rule 29 (expression -> function_call .) ]
  ! IFF             [ reduce using rule 29 (expression -> function_call .) ]
  ! DEF             [ reduce using rule 29 (expression -> function_call .) ]
  ! LOP             [ reduce using rule 29 (expression -> function_call .) ]
  ! RET             [ reduce using rule 29 (expression -> function_call .) ]
  ! IDENT           [ reduce using rule 29 (expression -> function_call .) ]
  ! NUMBER          [ reduce using rule 29 (expression -> function_call .) ]
  ! STRING          [ reduce using rule 29 (expression -> function_call .) ]
  ! BOOL            [ reduce using rule 29 (expression -> function_call .) ]
  ! NOT             [ reduce using rule 29 (expression -> function_call .) ]
  ! LPAREN          [ reduce using rule 29 (expression -> function_call .) ]
  ! $end            [ reduce using rule 29 (expression -> function_call .) ]
  ! DEDENT          [ reduce using rule 29 (expression -> function_call .) ]


state 11

    (12) statement -> NEWLINE .

    NEWLINE         reduce using rule 12 (statement -> NEWLINE .)
    IFF             reduce using rule 12 (statement -> NEWLINE .)
    DEF             reduce using rule 12 (statement -> NEWLINE .)
    LOP             reduce using rule 12 (statement -> NEWLINE .)
    RET             reduce using rule 12 (statement -> NEWLINE .)
    IDENT           reduce using rule 12 (statement -> NEWLINE .)
    NUMBER          reduce using rule 12 (statement -> NEWLINE .)
    STRING          reduce using rule 12 (statement -> NEWLINE .)
    BOOL            reduce using rule 12 (statement -> NEWLINE .)
    NOT             reduce using rule 12 (statement -> NEWLINE .)
    LPAREN          reduce using rule 12 (statement -> NEWLINE .)
    $end            reduce using rule 12 (statement -> NEWLINE .)
    DEDENT          reduce using rule 12 (statement -> NEWLINE .)


state 12

    (14) if_statement -> IFF . expression block
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 26
    function_call                  shift and go to state 28

state 13

    (38) expression_statement -> expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

    NEWLINE         reduce using rule 38 (expression_statement -> expression .)
    IFF             reduce using rule 38 (expression_statement -> expression .)
    DEF             reduce using rule 38 (expression_statement -> expression .)
    LOP             reduce using rule 38 (expression_statement -> expression .)
    RET             reduce using rule 38 (expression_statement -> expression .)
    IDENT           reduce using rule 38 (expression_statement -> expression .)
    NUMBER          reduce using rule 38 (expression_statement -> expression .)
    STRING          reduce using rule 38 (expression_statement -> expression .)
    BOOL            reduce using rule 38 (expression_statement -> expression .)
    NOT             reduce using rule 38 (expression_statement -> expression .)
    LPAREN          reduce using rule 38 (expression_statement -> expression .)
    $end            reduce using rule 38 (expression_statement -> expression .)
    DEDENT          reduce using rule 38 (expression_statement -> expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34


state 14

    (17) def_statement -> DEF . IDENT arg block

    IDENT           shift and go to state 35


state 15

    (13) function_call -> IDENT . arg
    (27) expression -> IDENT .
    (18) arg -> . IDENT
    (19) arg -> . STRING
    (20) arg -> . NUMBER
    (21) arg -> . arg IDENT
    (22) arg -> .

  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for IFF resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for DEF resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for LOP resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for RET resolved using rule 22 (arg -> .)
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! reduce/reduce conflict for BOOL resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for $end resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for MUL resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for DIV resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for MODULUS resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for DEDENT resolved using rule 22 (arg -> .)
    IDENT           shift and go to state 36
    STRING          shift and go to state 38
    NUMBER          shift and go to state 39
    NEWLINE         reduce using rule 22 (arg -> .)
    IFF             reduce using rule 22 (arg -> .)
    DEF             reduce using rule 22 (arg -> .)
    LOP             reduce using rule 22 (arg -> .)
    RET             reduce using rule 22 (arg -> .)
    BOOL            reduce using rule 22 (arg -> .)
    NOT             reduce using rule 22 (arg -> .)
    LPAREN          reduce using rule 22 (arg -> .)
    $end            reduce using rule 22 (arg -> .)
    EQUAL           reduce using rule 22 (arg -> .)
    PLUS            reduce using rule 22 (arg -> .)
    MINUS           reduce using rule 22 (arg -> .)
    MUL             reduce using rule 22 (arg -> .)
    DIV             reduce using rule 22 (arg -> .)
    MODULUS         reduce using rule 22 (arg -> .)
    DEDENT          reduce using rule 22 (arg -> .)

  ! EQUAL           [ reduce using rule 27 (expression -> IDENT .) ]
  ! PLUS            [ reduce using rule 27 (expression -> IDENT .) ]
  ! MINUS           [ reduce using rule 27 (expression -> IDENT .) ]
  ! MUL             [ reduce using rule 27 (expression -> IDENT .) ]
  ! DIV             [ reduce using rule 27 (expression -> IDENT .) ]
  ! MODULUS         [ reduce using rule 27 (expression -> IDENT .) ]
  ! NEWLINE         [ reduce using rule 27 (expression -> IDENT .) ]
  ! IFF             [ reduce using rule 27 (expression -> IDENT .) ]
  ! DEF             [ reduce using rule 27 (expression -> IDENT .) ]
  ! LOP             [ reduce using rule 27 (expression -> IDENT .) ]
  ! RET             [ reduce using rule 27 (expression -> IDENT .) ]
  ! IDENT           [ reduce using rule 27 (expression -> IDENT .) ]
  ! NUMBER          [ reduce using rule 27 (expression -> IDENT .) ]
  ! STRING          [ reduce using rule 27 (expression -> IDENT .) ]
  ! BOOL            [ reduce using rule 27 (expression -> IDENT .) ]
  ! NOT             [ reduce using rule 27 (expression -> IDENT .) ]
  ! LPAREN          [ reduce using rule 27 (expression -> IDENT .) ]
  ! $end            [ reduce using rule 27 (expression -> IDENT .) ]
  ! DEDENT          [ reduce using rule 27 (expression -> IDENT .) ]
  ! IDENT           [ reduce using rule 22 (arg -> .) ]
  ! NUMBER          [ reduce using rule 22 (arg -> .) ]
  ! STRING          [ reduce using rule 22 (arg -> .) ]

    arg                            shift and go to state 37

state 16

    (23) loop_statement -> LOP . IDENT expression expression block

    IDENT           shift and go to state 40


state 17

    (37) return_statement -> RET . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 41
    function_call                  shift and go to state 28

state 18

    (24) expression -> NUMBER .

    EQUAL           reduce using rule 24 (expression -> NUMBER .)
    PLUS            reduce using rule 24 (expression -> NUMBER .)
    MINUS           reduce using rule 24 (expression -> NUMBER .)
    MUL             reduce using rule 24 (expression -> NUMBER .)
    DIV             reduce using rule 24 (expression -> NUMBER .)
    MODULUS         reduce using rule 24 (expression -> NUMBER .)
    NEWLINE         reduce using rule 24 (expression -> NUMBER .)
    IFF             reduce using rule 24 (expression -> NUMBER .)
    DEF             reduce using rule 24 (expression -> NUMBER .)
    LOP             reduce using rule 24 (expression -> NUMBER .)
    RET             reduce using rule 24 (expression -> NUMBER .)
    IDENT           reduce using rule 24 (expression -> NUMBER .)
    NUMBER          reduce using rule 24 (expression -> NUMBER .)
    STRING          reduce using rule 24 (expression -> NUMBER .)
    BOOL            reduce using rule 24 (expression -> NUMBER .)
    NOT             reduce using rule 24 (expression -> NUMBER .)
    LPAREN          reduce using rule 24 (expression -> NUMBER .)
    $end            reduce using rule 24 (expression -> NUMBER .)
    INDENT          reduce using rule 24 (expression -> NUMBER .)
    DEDENT          reduce using rule 24 (expression -> NUMBER .)
    RPAREN          reduce using rule 24 (expression -> NUMBER .)


state 19

    (25) expression -> STRING .

    EQUAL           reduce using rule 25 (expression -> STRING .)
    PLUS            reduce using rule 25 (expression -> STRING .)
    MINUS           reduce using rule 25 (expression -> STRING .)
    MUL             reduce using rule 25 (expression -> STRING .)
    DIV             reduce using rule 25 (expression -> STRING .)
    MODULUS         reduce using rule 25 (expression -> STRING .)
    NEWLINE         reduce using rule 25 (expression -> STRING .)
    IFF             reduce using rule 25 (expression -> STRING .)
    DEF             reduce using rule 25 (expression -> STRING .)
    LOP             reduce using rule 25 (expression -> STRING .)
    RET             reduce using rule 25 (expression -> STRING .)
    IDENT           reduce using rule 25 (expression -> STRING .)
    NUMBER          reduce using rule 25 (expression -> STRING .)
    STRING          reduce using rule 25 (expression -> STRING .)
    BOOL            reduce using rule 25 (expression -> STRING .)
    NOT             reduce using rule 25 (expression -> STRING .)
    LPAREN          reduce using rule 25 (expression -> STRING .)
    $end            reduce using rule 25 (expression -> STRING .)
    INDENT          reduce using rule 25 (expression -> STRING .)
    DEDENT          reduce using rule 25 (expression -> STRING .)
    RPAREN          reduce using rule 25 (expression -> STRING .)


state 20

    (26) expression -> BOOL .

    EQUAL           reduce using rule 26 (expression -> BOOL .)
    PLUS            reduce using rule 26 (expression -> BOOL .)
    MINUS           reduce using rule 26 (expression -> BOOL .)
    MUL             reduce using rule 26 (expression -> BOOL .)
    DIV             reduce using rule 26 (expression -> BOOL .)
    MODULUS         reduce using rule 26 (expression -> BOOL .)
    NEWLINE         reduce using rule 26 (expression -> BOOL .)
    IFF             reduce using rule 26 (expression -> BOOL .)
    DEF             reduce using rule 26 (expression -> BOOL .)
    LOP             reduce using rule 26 (expression -> BOOL .)
    RET             reduce using rule 26 (expression -> BOOL .)
    IDENT           reduce using rule 26 (expression -> BOOL .)
    NUMBER          reduce using rule 26 (expression -> BOOL .)
    STRING          reduce using rule 26 (expression -> BOOL .)
    BOOL            reduce using rule 26 (expression -> BOOL .)
    NOT             reduce using rule 26 (expression -> BOOL .)
    LPAREN          reduce using rule 26 (expression -> BOOL .)
    $end            reduce using rule 26 (expression -> BOOL .)
    INDENT          reduce using rule 26 (expression -> BOOL .)
    DEDENT          reduce using rule 26 (expression -> BOOL .)
    RPAREN          reduce using rule 26 (expression -> BOOL .)


state 21

    (28) expression -> NOT . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 42
    function_call                  shift and go to state 28

state 22

    (36) expression -> LPAREN . expression RPAREN
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 43
    function_call                  shift and go to state 28

state 23

    (4) statements -> statements statement .

    NEWLINE         reduce using rule 4 (statements -> statements statement .)
    IFF             reduce using rule 4 (statements -> statements statement .)
    DEF             reduce using rule 4 (statements -> statements statement .)
    LOP             reduce using rule 4 (statements -> statements statement .)
    RET             reduce using rule 4 (statements -> statements statement .)
    IDENT           reduce using rule 4 (statements -> statements statement .)
    NUMBER          reduce using rule 4 (statements -> statements statement .)
    STRING          reduce using rule 4 (statements -> statements statement .)
    BOOL            reduce using rule 4 (statements -> statements statement .)
    NOT             reduce using rule 4 (statements -> statements statement .)
    LPAREN          reduce using rule 4 (statements -> statements statement .)
    $end            reduce using rule 4 (statements -> statements statement .)
    DEDENT          reduce using rule 4 (statements -> statements statement .)


state 24

    (15) if_else_statement -> if_statement else_statement .

    NEWLINE         reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    IFF             reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    DEF             reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    LOP             reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    RET             reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    IDENT           reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    NUMBER          reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    STRING          reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    BOOL            reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    NOT             reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    LPAREN          reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    $end            reduce using rule 15 (if_else_statement -> if_statement else_statement .)
    DEDENT          reduce using rule 15 (if_else_statement -> if_statement else_statement .)


state 25

    (16) else_statement -> ELS . block
    (2) block -> . INDENT statements DEDENT

    INDENT          shift and go to state 45

    block                          shift and go to state 44

state 26

    (14) if_statement -> IFF expression . block
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression
    (2) block -> . INDENT statements DEDENT

    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34
    INDENT          shift and go to state 45

    block                          shift and go to state 46

state 27

    (27) expression -> IDENT .
    (13) function_call -> IDENT . arg
    (18) arg -> . IDENT
    (19) arg -> . STRING
    (20) arg -> . NUMBER
    (21) arg -> . arg IDENT
    (22) arg -> .

  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for MUL resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for DIV resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for MODULUS resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for INDENT resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for IFF resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for DEF resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for LOP resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for RET resolved using rule 22 (arg -> .)
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! reduce/reduce conflict for BOOL resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for $end resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for DEDENT resolved using rule 22 (arg -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (arg -> .)
    IDENT           shift and go to state 36
    STRING          shift and go to state 38
    NUMBER          shift and go to state 39
    EQUAL           reduce using rule 22 (arg -> .)
    PLUS            reduce using rule 22 (arg -> .)
    MINUS           reduce using rule 22 (arg -> .)
    MUL             reduce using rule 22 (arg -> .)
    DIV             reduce using rule 22 (arg -> .)
    MODULUS         reduce using rule 22 (arg -> .)
    INDENT          reduce using rule 22 (arg -> .)
    NEWLINE         reduce using rule 22 (arg -> .)
    IFF             reduce using rule 22 (arg -> .)
    DEF             reduce using rule 22 (arg -> .)
    LOP             reduce using rule 22 (arg -> .)
    RET             reduce using rule 22 (arg -> .)
    BOOL            reduce using rule 22 (arg -> .)
    NOT             reduce using rule 22 (arg -> .)
    LPAREN          reduce using rule 22 (arg -> .)
    $end            reduce using rule 22 (arg -> .)
    DEDENT          reduce using rule 22 (arg -> .)
    RPAREN          reduce using rule 22 (arg -> .)

  ! EQUAL           [ reduce using rule 27 (expression -> IDENT .) ]
  ! PLUS            [ reduce using rule 27 (expression -> IDENT .) ]
  ! MINUS           [ reduce using rule 27 (expression -> IDENT .) ]
  ! MUL             [ reduce using rule 27 (expression -> IDENT .) ]
  ! DIV             [ reduce using rule 27 (expression -> IDENT .) ]
  ! MODULUS         [ reduce using rule 27 (expression -> IDENT .) ]
  ! INDENT          [ reduce using rule 27 (expression -> IDENT .) ]
  ! NEWLINE         [ reduce using rule 27 (expression -> IDENT .) ]
  ! IFF             [ reduce using rule 27 (expression -> IDENT .) ]
  ! DEF             [ reduce using rule 27 (expression -> IDENT .) ]
  ! LOP             [ reduce using rule 27 (expression -> IDENT .) ]
  ! RET             [ reduce using rule 27 (expression -> IDENT .) ]
  ! IDENT           [ reduce using rule 27 (expression -> IDENT .) ]
  ! NUMBER          [ reduce using rule 27 (expression -> IDENT .) ]
  ! STRING          [ reduce using rule 27 (expression -> IDENT .) ]
  ! BOOL            [ reduce using rule 27 (expression -> IDENT .) ]
  ! NOT             [ reduce using rule 27 (expression -> IDENT .) ]
  ! LPAREN          [ reduce using rule 27 (expression -> IDENT .) ]
  ! $end            [ reduce using rule 27 (expression -> IDENT .) ]
  ! DEDENT          [ reduce using rule 27 (expression -> IDENT .) ]
  ! RPAREN          [ reduce using rule 27 (expression -> IDENT .) ]
  ! IDENT           [ reduce using rule 22 (arg -> .) ]
  ! NUMBER          [ reduce using rule 22 (arg -> .) ]
  ! STRING          [ reduce using rule 22 (arg -> .) ]

    arg                            shift and go to state 37

state 28

    (29) expression -> function_call .

    EQUAL           reduce using rule 29 (expression -> function_call .)
    PLUS            reduce using rule 29 (expression -> function_call .)
    MINUS           reduce using rule 29 (expression -> function_call .)
    MUL             reduce using rule 29 (expression -> function_call .)
    DIV             reduce using rule 29 (expression -> function_call .)
    MODULUS         reduce using rule 29 (expression -> function_call .)
    INDENT          reduce using rule 29 (expression -> function_call .)
    NEWLINE         reduce using rule 29 (expression -> function_call .)
    IFF             reduce using rule 29 (expression -> function_call .)
    DEF             reduce using rule 29 (expression -> function_call .)
    LOP             reduce using rule 29 (expression -> function_call .)
    RET             reduce using rule 29 (expression -> function_call .)
    IDENT           reduce using rule 29 (expression -> function_call .)
    NUMBER          reduce using rule 29 (expression -> function_call .)
    STRING          reduce using rule 29 (expression -> function_call .)
    BOOL            reduce using rule 29 (expression -> function_call .)
    NOT             reduce using rule 29 (expression -> function_call .)
    LPAREN          reduce using rule 29 (expression -> function_call .)
    $end            reduce using rule 29 (expression -> function_call .)
    DEDENT          reduce using rule 29 (expression -> function_call .)
    RPAREN          reduce using rule 29 (expression -> function_call .)


state 29

    (30) expression -> expression EQUAL . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 47
    function_call                  shift and go to state 28

state 30

    (31) expression -> expression PLUS . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 48
    function_call                  shift and go to state 28

state 31

    (32) expression -> expression MINUS . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 49
    function_call                  shift and go to state 28

state 32

    (33) expression -> expression MUL . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 50
    function_call                  shift and go to state 28

state 33

    (34) expression -> expression DIV . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 51
    function_call                  shift and go to state 28

state 34

    (35) expression -> expression MODULUS . expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 52
    function_call                  shift and go to state 28

state 35

    (17) def_statement -> DEF IDENT . arg block
    (18) arg -> . IDENT
    (19) arg -> . STRING
    (20) arg -> . NUMBER
    (21) arg -> . arg IDENT
    (22) arg -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 36
    STRING          shift and go to state 38
    NUMBER          shift and go to state 39
    INDENT          reduce using rule 22 (arg -> .)

  ! IDENT           [ reduce using rule 22 (arg -> .) ]

    arg                            shift and go to state 53

state 36

    (18) arg -> IDENT .

    IDENT           reduce using rule 18 (arg -> IDENT .)
    NEWLINE         reduce using rule 18 (arg -> IDENT .)
    IFF             reduce using rule 18 (arg -> IDENT .)
    DEF             reduce using rule 18 (arg -> IDENT .)
    LOP             reduce using rule 18 (arg -> IDENT .)
    RET             reduce using rule 18 (arg -> IDENT .)
    NUMBER          reduce using rule 18 (arg -> IDENT .)
    STRING          reduce using rule 18 (arg -> IDENT .)
    BOOL            reduce using rule 18 (arg -> IDENT .)
    NOT             reduce using rule 18 (arg -> IDENT .)
    LPAREN          reduce using rule 18 (arg -> IDENT .)
    $end            reduce using rule 18 (arg -> IDENT .)
    EQUAL           reduce using rule 18 (arg -> IDENT .)
    PLUS            reduce using rule 18 (arg -> IDENT .)
    MINUS           reduce using rule 18 (arg -> IDENT .)
    MUL             reduce using rule 18 (arg -> IDENT .)
    DIV             reduce using rule 18 (arg -> IDENT .)
    MODULUS         reduce using rule 18 (arg -> IDENT .)
    DEDENT          reduce using rule 18 (arg -> IDENT .)
    INDENT          reduce using rule 18 (arg -> IDENT .)
    RPAREN          reduce using rule 18 (arg -> IDENT .)


state 37

    (13) function_call -> IDENT arg .
    (21) arg -> arg . IDENT

  ! shift/reduce conflict for IDENT resolved as shift
    NEWLINE         reduce using rule 13 (function_call -> IDENT arg .)
    IFF             reduce using rule 13 (function_call -> IDENT arg .)
    DEF             reduce using rule 13 (function_call -> IDENT arg .)
    LOP             reduce using rule 13 (function_call -> IDENT arg .)
    RET             reduce using rule 13 (function_call -> IDENT arg .)
    NUMBER          reduce using rule 13 (function_call -> IDENT arg .)
    STRING          reduce using rule 13 (function_call -> IDENT arg .)
    BOOL            reduce using rule 13 (function_call -> IDENT arg .)
    NOT             reduce using rule 13 (function_call -> IDENT arg .)
    LPAREN          reduce using rule 13 (function_call -> IDENT arg .)
    $end            reduce using rule 13 (function_call -> IDENT arg .)
    EQUAL           reduce using rule 13 (function_call -> IDENT arg .)
    PLUS            reduce using rule 13 (function_call -> IDENT arg .)
    MINUS           reduce using rule 13 (function_call -> IDENT arg .)
    MUL             reduce using rule 13 (function_call -> IDENT arg .)
    DIV             reduce using rule 13 (function_call -> IDENT arg .)
    MODULUS         reduce using rule 13 (function_call -> IDENT arg .)
    INDENT          reduce using rule 13 (function_call -> IDENT arg .)
    DEDENT          reduce using rule 13 (function_call -> IDENT arg .)
    RPAREN          reduce using rule 13 (function_call -> IDENT arg .)
    IDENT           shift and go to state 54

  ! IDENT           [ reduce using rule 13 (function_call -> IDENT arg .) ]


state 38

    (19) arg -> STRING .

    IDENT           reduce using rule 19 (arg -> STRING .)
    NEWLINE         reduce using rule 19 (arg -> STRING .)
    IFF             reduce using rule 19 (arg -> STRING .)
    DEF             reduce using rule 19 (arg -> STRING .)
    LOP             reduce using rule 19 (arg -> STRING .)
    RET             reduce using rule 19 (arg -> STRING .)
    NUMBER          reduce using rule 19 (arg -> STRING .)
    STRING          reduce using rule 19 (arg -> STRING .)
    BOOL            reduce using rule 19 (arg -> STRING .)
    NOT             reduce using rule 19 (arg -> STRING .)
    LPAREN          reduce using rule 19 (arg -> STRING .)
    $end            reduce using rule 19 (arg -> STRING .)
    EQUAL           reduce using rule 19 (arg -> STRING .)
    PLUS            reduce using rule 19 (arg -> STRING .)
    MINUS           reduce using rule 19 (arg -> STRING .)
    MUL             reduce using rule 19 (arg -> STRING .)
    DIV             reduce using rule 19 (arg -> STRING .)
    MODULUS         reduce using rule 19 (arg -> STRING .)
    DEDENT          reduce using rule 19 (arg -> STRING .)
    INDENT          reduce using rule 19 (arg -> STRING .)
    RPAREN          reduce using rule 19 (arg -> STRING .)


state 39

    (20) arg -> NUMBER .

    IDENT           reduce using rule 20 (arg -> NUMBER .)
    NEWLINE         reduce using rule 20 (arg -> NUMBER .)
    IFF             reduce using rule 20 (arg -> NUMBER .)
    DEF             reduce using rule 20 (arg -> NUMBER .)
    LOP             reduce using rule 20 (arg -> NUMBER .)
    RET             reduce using rule 20 (arg -> NUMBER .)
    NUMBER          reduce using rule 20 (arg -> NUMBER .)
    STRING          reduce using rule 20 (arg -> NUMBER .)
    BOOL            reduce using rule 20 (arg -> NUMBER .)
    NOT             reduce using rule 20 (arg -> NUMBER .)
    LPAREN          reduce using rule 20 (arg -> NUMBER .)
    $end            reduce using rule 20 (arg -> NUMBER .)
    EQUAL           reduce using rule 20 (arg -> NUMBER .)
    PLUS            reduce using rule 20 (arg -> NUMBER .)
    MINUS           reduce using rule 20 (arg -> NUMBER .)
    MUL             reduce using rule 20 (arg -> NUMBER .)
    DIV             reduce using rule 20 (arg -> NUMBER .)
    MODULUS         reduce using rule 20 (arg -> NUMBER .)
    DEDENT          reduce using rule 20 (arg -> NUMBER .)
    INDENT          reduce using rule 20 (arg -> NUMBER .)
    RPAREN          reduce using rule 20 (arg -> NUMBER .)


state 40

    (23) loop_statement -> LOP IDENT . expression expression block
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 55
    function_call                  shift and go to state 28

state 41

    (37) return_statement -> RET expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

    NEWLINE         reduce using rule 37 (return_statement -> RET expression .)
    IFF             reduce using rule 37 (return_statement -> RET expression .)
    DEF             reduce using rule 37 (return_statement -> RET expression .)
    LOP             reduce using rule 37 (return_statement -> RET expression .)
    RET             reduce using rule 37 (return_statement -> RET expression .)
    IDENT           reduce using rule 37 (return_statement -> RET expression .)
    NUMBER          reduce using rule 37 (return_statement -> RET expression .)
    STRING          reduce using rule 37 (return_statement -> RET expression .)
    BOOL            reduce using rule 37 (return_statement -> RET expression .)
    NOT             reduce using rule 37 (return_statement -> RET expression .)
    LPAREN          reduce using rule 37 (return_statement -> RET expression .)
    $end            reduce using rule 37 (return_statement -> RET expression .)
    DEDENT          reduce using rule 37 (return_statement -> RET expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34


state 42

    (28) expression -> NOT expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    NEWLINE         reduce using rule 28 (expression -> NOT expression .)
    IFF             reduce using rule 28 (expression -> NOT expression .)
    DEF             reduce using rule 28 (expression -> NOT expression .)
    LOP             reduce using rule 28 (expression -> NOT expression .)
    RET             reduce using rule 28 (expression -> NOT expression .)
    IDENT           reduce using rule 28 (expression -> NOT expression .)
    NUMBER          reduce using rule 28 (expression -> NOT expression .)
    STRING          reduce using rule 28 (expression -> NOT expression .)
    BOOL            reduce using rule 28 (expression -> NOT expression .)
    NOT             reduce using rule 28 (expression -> NOT expression .)
    LPAREN          reduce using rule 28 (expression -> NOT expression .)
    $end            reduce using rule 28 (expression -> NOT expression .)
    INDENT          reduce using rule 28 (expression -> NOT expression .)
    DEDENT          reduce using rule 28 (expression -> NOT expression .)
    RPAREN          reduce using rule 28 (expression -> NOT expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34

  ! EQUAL           [ reduce using rule 28 (expression -> NOT expression .) ]
  ! PLUS            [ reduce using rule 28 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 28 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 28 (expression -> NOT expression .) ]
  ! MODULUS         [ reduce using rule 28 (expression -> NOT expression .) ]


state 43

    (36) expression -> LPAREN expression . RPAREN
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

    RPAREN          shift and go to state 56
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34


state 44

    (16) else_statement -> ELS block .

    NEWLINE         reduce using rule 16 (else_statement -> ELS block .)
    IFF             reduce using rule 16 (else_statement -> ELS block .)
    DEF             reduce using rule 16 (else_statement -> ELS block .)
    LOP             reduce using rule 16 (else_statement -> ELS block .)
    RET             reduce using rule 16 (else_statement -> ELS block .)
    IDENT           reduce using rule 16 (else_statement -> ELS block .)
    NUMBER          reduce using rule 16 (else_statement -> ELS block .)
    STRING          reduce using rule 16 (else_statement -> ELS block .)
    BOOL            reduce using rule 16 (else_statement -> ELS block .)
    NOT             reduce using rule 16 (else_statement -> ELS block .)
    LPAREN          reduce using rule 16 (else_statement -> ELS block .)
    $end            reduce using rule 16 (else_statement -> ELS block .)
    DEDENT          reduce using rule 16 (else_statement -> ELS block .)


state 45

    (2) block -> INDENT . statements DEDENT
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statement -> . if_statement
    (6) statement -> . if_else_statement
    (7) statement -> . def_statement
    (8) statement -> . loop_statement
    (9) statement -> . return_statement
    (10) statement -> . expression_statement
    (11) statement -> . function_call
    (12) statement -> . NEWLINE
    (14) if_statement -> . IFF expression block
    (15) if_else_statement -> . if_statement else_statement
    (17) def_statement -> . DEF IDENT arg block
    (23) loop_statement -> . LOP IDENT expression expression block
    (37) return_statement -> . RET expression
    (38) expression_statement -> . expression
    (13) function_call -> . IDENT arg
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 11
    IFF             shift and go to state 12
    DEF             shift and go to state 14
    LOP             shift and go to state 16
    RET             shift and go to state 17
    IDENT           shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    statements                     shift and go to state 57
    statement                      shift and go to state 3
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    def_statement                  shift and go to state 6
    loop_statement                 shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    function_call                  shift and go to state 10
    expression                     shift and go to state 13

state 46

    (14) if_statement -> IFF expression block .

    ELS             reduce using rule 14 (if_statement -> IFF expression block .)
    NEWLINE         reduce using rule 14 (if_statement -> IFF expression block .)
    IFF             reduce using rule 14 (if_statement -> IFF expression block .)
    DEF             reduce using rule 14 (if_statement -> IFF expression block .)
    LOP             reduce using rule 14 (if_statement -> IFF expression block .)
    RET             reduce using rule 14 (if_statement -> IFF expression block .)
    IDENT           reduce using rule 14 (if_statement -> IFF expression block .)
    NUMBER          reduce using rule 14 (if_statement -> IFF expression block .)
    STRING          reduce using rule 14 (if_statement -> IFF expression block .)
    BOOL            reduce using rule 14 (if_statement -> IFF expression block .)
    NOT             reduce using rule 14 (if_statement -> IFF expression block .)
    LPAREN          reduce using rule 14 (if_statement -> IFF expression block .)
    $end            reduce using rule 14 (if_statement -> IFF expression block .)
    DEDENT          reduce using rule 14 (if_statement -> IFF expression block .)


state 47

    (30) expression -> expression EQUAL expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    NEWLINE         reduce using rule 30 (expression -> expression EQUAL expression .)
    IFF             reduce using rule 30 (expression -> expression EQUAL expression .)
    DEF             reduce using rule 30 (expression -> expression EQUAL expression .)
    LOP             reduce using rule 30 (expression -> expression EQUAL expression .)
    RET             reduce using rule 30 (expression -> expression EQUAL expression .)
    IDENT           reduce using rule 30 (expression -> expression EQUAL expression .)
    NUMBER          reduce using rule 30 (expression -> expression EQUAL expression .)
    STRING          reduce using rule 30 (expression -> expression EQUAL expression .)
    BOOL            reduce using rule 30 (expression -> expression EQUAL expression .)
    NOT             reduce using rule 30 (expression -> expression EQUAL expression .)
    LPAREN          reduce using rule 30 (expression -> expression EQUAL expression .)
    $end            reduce using rule 30 (expression -> expression EQUAL expression .)
    INDENT          reduce using rule 30 (expression -> expression EQUAL expression .)
    DEDENT          reduce using rule 30 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 30 (expression -> expression EQUAL expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34

  ! EQUAL           [ reduce using rule 30 (expression -> expression EQUAL expression .) ]
  ! PLUS            [ reduce using rule 30 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression EQUAL expression .) ]
  ! MUL             [ reduce using rule 30 (expression -> expression EQUAL expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> expression EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 30 (expression -> expression EQUAL expression .) ]


state 48

    (31) expression -> expression PLUS expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    NEWLINE         reduce using rule 31 (expression -> expression PLUS expression .)
    IFF             reduce using rule 31 (expression -> expression PLUS expression .)
    DEF             reduce using rule 31 (expression -> expression PLUS expression .)
    LOP             reduce using rule 31 (expression -> expression PLUS expression .)
    RET             reduce using rule 31 (expression -> expression PLUS expression .)
    IDENT           reduce using rule 31 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 31 (expression -> expression PLUS expression .)
    STRING          reduce using rule 31 (expression -> expression PLUS expression .)
    BOOL            reduce using rule 31 (expression -> expression PLUS expression .)
    NOT             reduce using rule 31 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 31 (expression -> expression PLUS expression .)
    $end            reduce using rule 31 (expression -> expression PLUS expression .)
    INDENT          reduce using rule 31 (expression -> expression PLUS expression .)
    DEDENT          reduce using rule 31 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 31 (expression -> expression PLUS expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34

  ! EQUAL           [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! MUL             [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 31 (expression -> expression PLUS expression .) ]


state 49

    (32) expression -> expression MINUS expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    NEWLINE         reduce using rule 32 (expression -> expression MINUS expression .)
    IFF             reduce using rule 32 (expression -> expression MINUS expression .)
    DEF             reduce using rule 32 (expression -> expression MINUS expression .)
    LOP             reduce using rule 32 (expression -> expression MINUS expression .)
    RET             reduce using rule 32 (expression -> expression MINUS expression .)
    IDENT           reduce using rule 32 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 32 (expression -> expression MINUS expression .)
    STRING          reduce using rule 32 (expression -> expression MINUS expression .)
    BOOL            reduce using rule 32 (expression -> expression MINUS expression .)
    NOT             reduce using rule 32 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 32 (expression -> expression MINUS expression .)
    $end            reduce using rule 32 (expression -> expression MINUS expression .)
    INDENT          reduce using rule 32 (expression -> expression MINUS expression .)
    DEDENT          reduce using rule 32 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 32 (expression -> expression MINUS expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34

  ! EQUAL           [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! MUL             [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 32 (expression -> expression MINUS expression .) ]


state 50

    (33) expression -> expression MUL expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    NEWLINE         reduce using rule 33 (expression -> expression MUL expression .)
    IFF             reduce using rule 33 (expression -> expression MUL expression .)
    DEF             reduce using rule 33 (expression -> expression MUL expression .)
    LOP             reduce using rule 33 (expression -> expression MUL expression .)
    RET             reduce using rule 33 (expression -> expression MUL expression .)
    IDENT           reduce using rule 33 (expression -> expression MUL expression .)
    NUMBER          reduce using rule 33 (expression -> expression MUL expression .)
    STRING          reduce using rule 33 (expression -> expression MUL expression .)
    BOOL            reduce using rule 33 (expression -> expression MUL expression .)
    NOT             reduce using rule 33 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 33 (expression -> expression MUL expression .)
    $end            reduce using rule 33 (expression -> expression MUL expression .)
    INDENT          reduce using rule 33 (expression -> expression MUL expression .)
    DEDENT          reduce using rule 33 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 33 (expression -> expression MUL expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34

  ! EQUAL           [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! PLUS            [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! MUL             [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! MODULUS         [ reduce using rule 33 (expression -> expression MUL expression .) ]


state 51

    (34) expression -> expression DIV expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    NEWLINE         reduce using rule 34 (expression -> expression DIV expression .)
    IFF             reduce using rule 34 (expression -> expression DIV expression .)
    DEF             reduce using rule 34 (expression -> expression DIV expression .)
    LOP             reduce using rule 34 (expression -> expression DIV expression .)
    RET             reduce using rule 34 (expression -> expression DIV expression .)
    IDENT           reduce using rule 34 (expression -> expression DIV expression .)
    NUMBER          reduce using rule 34 (expression -> expression DIV expression .)
    STRING          reduce using rule 34 (expression -> expression DIV expression .)
    BOOL            reduce using rule 34 (expression -> expression DIV expression .)
    NOT             reduce using rule 34 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 34 (expression -> expression DIV expression .)
    $end            reduce using rule 34 (expression -> expression DIV expression .)
    INDENT          reduce using rule 34 (expression -> expression DIV expression .)
    DEDENT          reduce using rule 34 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 34 (expression -> expression DIV expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34

  ! EQUAL           [ reduce using rule 34 (expression -> expression DIV expression .) ]
  ! PLUS            [ reduce using rule 34 (expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> expression DIV expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression DIV expression .) ]
  ! MODULUS         [ reduce using rule 34 (expression -> expression DIV expression .) ]


state 52

    (35) expression -> expression MODULUS expression .
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    NEWLINE         reduce using rule 35 (expression -> expression MODULUS expression .)
    IFF             reduce using rule 35 (expression -> expression MODULUS expression .)
    DEF             reduce using rule 35 (expression -> expression MODULUS expression .)
    LOP             reduce using rule 35 (expression -> expression MODULUS expression .)
    RET             reduce using rule 35 (expression -> expression MODULUS expression .)
    IDENT           reduce using rule 35 (expression -> expression MODULUS expression .)
    NUMBER          reduce using rule 35 (expression -> expression MODULUS expression .)
    STRING          reduce using rule 35 (expression -> expression MODULUS expression .)
    BOOL            reduce using rule 35 (expression -> expression MODULUS expression .)
    NOT             reduce using rule 35 (expression -> expression MODULUS expression .)
    LPAREN          reduce using rule 35 (expression -> expression MODULUS expression .)
    $end            reduce using rule 35 (expression -> expression MODULUS expression .)
    INDENT          reduce using rule 35 (expression -> expression MODULUS expression .)
    DEDENT          reduce using rule 35 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 35 (expression -> expression MODULUS expression .)
    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34

  ! EQUAL           [ reduce using rule 35 (expression -> expression MODULUS expression .) ]
  ! PLUS            [ reduce using rule 35 (expression -> expression MODULUS expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression MODULUS expression .) ]
  ! MUL             [ reduce using rule 35 (expression -> expression MODULUS expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 35 (expression -> expression MODULUS expression .) ]


state 53

    (17) def_statement -> DEF IDENT arg . block
    (21) arg -> arg . IDENT
    (2) block -> . INDENT statements DEDENT

    IDENT           shift and go to state 54
    INDENT          shift and go to state 45

    block                          shift and go to state 58

state 54

    (21) arg -> arg IDENT .

    IDENT           reduce using rule 21 (arg -> arg IDENT .)
    NEWLINE         reduce using rule 21 (arg -> arg IDENT .)
    IFF             reduce using rule 21 (arg -> arg IDENT .)
    DEF             reduce using rule 21 (arg -> arg IDENT .)
    LOP             reduce using rule 21 (arg -> arg IDENT .)
    RET             reduce using rule 21 (arg -> arg IDENT .)
    NUMBER          reduce using rule 21 (arg -> arg IDENT .)
    STRING          reduce using rule 21 (arg -> arg IDENT .)
    BOOL            reduce using rule 21 (arg -> arg IDENT .)
    NOT             reduce using rule 21 (arg -> arg IDENT .)
    LPAREN          reduce using rule 21 (arg -> arg IDENT .)
    $end            reduce using rule 21 (arg -> arg IDENT .)
    EQUAL           reduce using rule 21 (arg -> arg IDENT .)
    PLUS            reduce using rule 21 (arg -> arg IDENT .)
    MINUS           reduce using rule 21 (arg -> arg IDENT .)
    MUL             reduce using rule 21 (arg -> arg IDENT .)
    DIV             reduce using rule 21 (arg -> arg IDENT .)
    MODULUS         reduce using rule 21 (arg -> arg IDENT .)
    DEDENT          reduce using rule 21 (arg -> arg IDENT .)
    INDENT          reduce using rule 21 (arg -> arg IDENT .)
    RPAREN          reduce using rule 21 (arg -> arg IDENT .)


state 55

    (23) loop_statement -> LOP IDENT expression . expression block
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN
    (13) function_call -> . IDENT arg

    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    IDENT           shift and go to state 27
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    expression                     shift and go to state 59
    function_call                  shift and go to state 28

state 56

    (36) expression -> LPAREN expression RPAREN .

    EQUAL           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IFF             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LOP             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RET             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IDENT           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    BOOL            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    INDENT          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DEDENT          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)


state 57

    (2) block -> INDENT statements . DEDENT
    (4) statements -> statements . statement
    (5) statement -> . if_statement
    (6) statement -> . if_else_statement
    (7) statement -> . def_statement
    (8) statement -> . loop_statement
    (9) statement -> . return_statement
    (10) statement -> . expression_statement
    (11) statement -> . function_call
    (12) statement -> . NEWLINE
    (14) if_statement -> . IFF expression block
    (15) if_else_statement -> . if_statement else_statement
    (17) def_statement -> . DEF IDENT arg block
    (23) loop_statement -> . LOP IDENT expression expression block
    (37) return_statement -> . RET expression
    (38) expression_statement -> . expression
    (13) function_call -> . IDENT arg
    (24) expression -> . NUMBER
    (25) expression -> . STRING
    (26) expression -> . BOOL
    (27) expression -> . IDENT
    (28) expression -> . NOT expression
    (29) expression -> . function_call
    (30) expression -> . expression EQUAL expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . LPAREN expression RPAREN

    DEDENT          shift and go to state 60
    NEWLINE         shift and go to state 11
    IFF             shift and go to state 12
    DEF             shift and go to state 14
    LOP             shift and go to state 16
    RET             shift and go to state 17
    IDENT           shift and go to state 15
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20
    NOT             shift and go to state 21
    LPAREN          shift and go to state 22

    statement                      shift and go to state 23
    if_statement                   shift and go to state 4
    if_else_statement              shift and go to state 5
    def_statement                  shift and go to state 6
    loop_statement                 shift and go to state 7
    return_statement               shift and go to state 8
    expression_statement           shift and go to state 9
    function_call                  shift and go to state 10
    expression                     shift and go to state 13

state 58

    (17) def_statement -> DEF IDENT arg block .

    NEWLINE         reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    IFF             reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    DEF             reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    LOP             reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    RET             reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    IDENT           reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    NUMBER          reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    STRING          reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    BOOL            reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    NOT             reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    LPAREN          reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    $end            reduce using rule 17 (def_statement -> DEF IDENT arg block .)
    DEDENT          reduce using rule 17 (def_statement -> DEF IDENT arg block .)


state 59

    (23) loop_statement -> LOP IDENT expression expression . block
    (30) expression -> expression . EQUAL expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . MODULUS expression
    (2) block -> . INDENT statements DEDENT

    EQUAL           shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 34
    INDENT          shift and go to state 45

    block                          shift and go to state 61

state 60

    (2) block -> INDENT statements DEDENT .

    NEWLINE         reduce using rule 2 (block -> INDENT statements DEDENT .)
    IFF             reduce using rule 2 (block -> INDENT statements DEDENT .)
    DEF             reduce using rule 2 (block -> INDENT statements DEDENT .)
    LOP             reduce using rule 2 (block -> INDENT statements DEDENT .)
    RET             reduce using rule 2 (block -> INDENT statements DEDENT .)
    IDENT           reduce using rule 2 (block -> INDENT statements DEDENT .)
    NUMBER          reduce using rule 2 (block -> INDENT statements DEDENT .)
    STRING          reduce using rule 2 (block -> INDENT statements DEDENT .)
    BOOL            reduce using rule 2 (block -> INDENT statements DEDENT .)
    NOT             reduce using rule 2 (block -> INDENT statements DEDENT .)
    LPAREN          reduce using rule 2 (block -> INDENT statements DEDENT .)
    $end            reduce using rule 2 (block -> INDENT statements DEDENT .)
    DEDENT          reduce using rule 2 (block -> INDENT statements DEDENT .)
    ELS             reduce using rule 2 (block -> INDENT statements DEDENT .)


state 61

    (23) loop_statement -> LOP IDENT expression expression block .

    NEWLINE         reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    IFF             reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    DEF             reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    LOP             reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    RET             reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    IDENT           reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    NUMBER          reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    STRING          reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    BOOL            reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    NOT             reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    LPAREN          reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    $end            reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)
    DEDENT          reduce using rule 23 (loop_statement -> LOP IDENT expression expression block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENT in state 15 resolved as shift
WARNING: shift/reduce conflict for STRING in state 15 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 15 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 15 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 15 resolved as shift
WARNING: shift/reduce conflict for STRING in state 15 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING in state 27 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 27 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 27 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING in state 27 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 35 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 37 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MUL in state 42 resolved as shift
WARNING: shift/reduce conflict for DIV in state 42 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 42 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MUL in state 47 resolved as shift
WARNING: shift/reduce conflict for DIV in state 47 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 47 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MUL in state 48 resolved as shift
WARNING: shift/reduce conflict for DIV in state 48 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 48 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MUL in state 49 resolved as shift
WARNING: shift/reduce conflict for DIV in state 49 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 49 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MUL in state 50 resolved as shift
WARNING: shift/reduce conflict for DIV in state 50 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 50 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MUL in state 51 resolved as shift
WARNING: shift/reduce conflict for DIV in state 51 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 51 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MUL in state 52 resolved as shift
WARNING: shift/reduce conflict for DIV in state 52 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 52 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (statement -> function_call)
WARNING: rejected rule (expression -> function_call) in state 10
WARNING: reduce/reduce conflict in state 15 resolved using rule (arg -> <empty>)
WARNING: rejected rule (expression -> IDENT) in state 15
WARNING: reduce/reduce conflict in state 27 resolved using rule (arg -> <empty>)
WARNING: rejected rule (expression -> IDENT) in state 27
WARNING: Rule (expression -> IDENT) is never reduced
