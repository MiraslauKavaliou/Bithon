Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     block -> INDENT statements DEDENT
Rule 3     statements -> statement
Rule 4     statements -> statements statement
Rule 5     statement -> if_else_statement
Rule 6     statement -> if_statement
Rule 7     statement -> def_statement
Rule 8     statement -> set_statement
Rule 9     statement -> loop_statement
Rule 10    statement -> return_statement
Rule 11    statement -> expression_statement
Rule 12    statement -> function_call
Rule 13    statement -> blankspace
Rule 14    blankspace -> NEWLINE
Rule 15    function_call -> IDENT arg
Rule 16    if_statement -> IFF expression block
Rule 17    if_else_statement -> if_statement else_statement
Rule 18    else_statement -> ELS block
Rule 19    def_statement -> DEF IDENT arg block
Rule 20    set_statement -> SET IDENT expression
Rule 21    arg -> expression
Rule 22    arg -> arg expression
Rule 23    arg -> <empty>
Rule 24    loop_statement -> LOP IDENT expression expression block
Rule 25    expression -> NUMBER
Rule 26    expression -> STRING
Rule 27    expression -> BOOL
Rule 28    expression -> function_call
Rule 29    expression -> LPAREN expression RPAREN
Rule 30    expression -> expression POWER expression
Rule 31    expression -> expression MUL expression
Rule 32    expression -> expression DIV expression
Rule 33    expression -> expression PLUS expression
Rule 34    expression -> expression MINUS expression
Rule 35    expression -> expression MODULUS expression
Rule 36    expression -> NOT expression
Rule 37    expression -> expression AND expression
Rule 38    expression -> expression OR expression
Rule 39    expression -> expression XOR expression
Rule 40    expression -> expression NAND expression
Rule 41    expression -> expression NOR expression
Rule 42    expression -> expression XNOR expression
Rule 43    expression -> expression EQUAL expression
Rule 44    return_statement -> RET expression
Rule 45    expression_statement -> expression

Terminals, with rules where they appear

AND                  : 37
BOOL                 : 27
DEDENT               : 2
DEF                  : 19
DIV                  : 32
ELS                  : 18
EQUAL                : 43
IDENT                : 15 19 20 24
IFF                  : 16
INDENT               : 2
LOP                  : 24
LPAREN               : 29
MINUS                : 34
MODULUS              : 35
MUL                  : 31
NAND                 : 40
NEWLINE              : 14
NOR                  : 41
NOT                  : 36
NUMBER               : 25
OR                   : 38
PLUS                 : 33
POWER                : 30
RET                  : 44
RPAREN               : 29
SET                  : 20
STRING               : 26
XNOR                 : 42
XOR                  : 39
error                : 

Nonterminals, with rules where they appear

arg                  : 15 19 22
blankspace           : 13
block                : 16 18 19 24
def_statement        : 7
else_statement       : 17
expression           : 16 20 21 22 24 24 29 30 30 31 31 32 32 33 33 34 34 35 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 45
expression_statement : 11
function_call        : 12 28
if_else_statement    : 5
if_statement         : 6 17
loop_statement       : 9
program              : 0
return_statement     : 10
set_statement        : 8
statement            : 3 4
statements           : 1 2 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statement -> . if_else_statement
    (6) statement -> . if_statement
    (7) statement -> . def_statement
    (8) statement -> . set_statement
    (9) statement -> . loop_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . function_call
    (13) statement -> . blankspace
    (17) if_else_statement -> . if_statement else_statement
    (16) if_statement -> . IFF expression block
    (19) def_statement -> . DEF IDENT arg block
    (20) set_statement -> . SET IDENT expression
    (24) loop_statement -> . LOP IDENT expression expression block
    (44) return_statement -> . RET expression
    (45) expression_statement -> . expression
    (15) function_call -> . IDENT arg
    (14) blankspace -> . NEWLINE
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression

    IFF             shift and go to state 13
    DEF             shift and go to state 15
    SET             shift and go to state 17
    LOP             shift and go to state 18
    RET             shift and go to state 19
    IDENT           shift and go to state 16
    NEWLINE         shift and go to state 20
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    if_else_statement              shift and go to state 4
    if_statement                   shift and go to state 5
    def_statement                  shift and go to state 6
    set_statement                  shift and go to state 7
    loop_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    expression_statement           shift and go to state 10
    function_call                  shift and go to state 11
    blankspace                     shift and go to state 12
    expression                     shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (4) statements -> statements . statement
    (5) statement -> . if_else_statement
    (6) statement -> . if_statement
    (7) statement -> . def_statement
    (8) statement -> . set_statement
    (9) statement -> . loop_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . function_call
    (13) statement -> . blankspace
    (17) if_else_statement -> . if_statement else_statement
    (16) if_statement -> . IFF expression block
    (19) def_statement -> . DEF IDENT arg block
    (20) set_statement -> . SET IDENT expression
    (24) loop_statement -> . LOP IDENT expression expression block
    (44) return_statement -> . RET expression
    (45) expression_statement -> . expression
    (15) function_call -> . IDENT arg
    (14) blankspace -> . NEWLINE
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression

    $end            reduce using rule 1 (program -> statements .)
    IFF             shift and go to state 13
    DEF             shift and go to state 15
    SET             shift and go to state 17
    LOP             shift and go to state 18
    RET             shift and go to state 19
    IDENT           shift and go to state 16
    NEWLINE         shift and go to state 20
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25

    statement                      shift and go to state 26
    if_else_statement              shift and go to state 4
    if_statement                   shift and go to state 5
    def_statement                  shift and go to state 6
    set_statement                  shift and go to state 7
    loop_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    expression_statement           shift and go to state 10
    function_call                  shift and go to state 11
    blankspace                     shift and go to state 12
    expression                     shift and go to state 14

state 3

    (3) statements -> statement .

    IFF             reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    SET             reduce using rule 3 (statements -> statement .)
    LOP             reduce using rule 3 (statements -> statement .)
    RET             reduce using rule 3 (statements -> statement .)
    IDENT           reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    NUMBER          reduce using rule 3 (statements -> statement .)
    STRING          reduce using rule 3 (statements -> statement .)
    BOOL            reduce using rule 3 (statements -> statement .)
    LPAREN          reduce using rule 3 (statements -> statement .)
    NOT             reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    DEDENT          reduce using rule 3 (statements -> statement .)


state 4

    (5) statement -> if_else_statement .

    IFF             reduce using rule 5 (statement -> if_else_statement .)
    DEF             reduce using rule 5 (statement -> if_else_statement .)
    SET             reduce using rule 5 (statement -> if_else_statement .)
    LOP             reduce using rule 5 (statement -> if_else_statement .)
    RET             reduce using rule 5 (statement -> if_else_statement .)
    IDENT           reduce using rule 5 (statement -> if_else_statement .)
    NEWLINE         reduce using rule 5 (statement -> if_else_statement .)
    NUMBER          reduce using rule 5 (statement -> if_else_statement .)
    STRING          reduce using rule 5 (statement -> if_else_statement .)
    BOOL            reduce using rule 5 (statement -> if_else_statement .)
    LPAREN          reduce using rule 5 (statement -> if_else_statement .)
    NOT             reduce using rule 5 (statement -> if_else_statement .)
    $end            reduce using rule 5 (statement -> if_else_statement .)
    DEDENT          reduce using rule 5 (statement -> if_else_statement .)


state 5

    (6) statement -> if_statement .
    (17) if_else_statement -> if_statement . else_statement
    (18) else_statement -> . ELS block

    IFF             reduce using rule 6 (statement -> if_statement .)
    DEF             reduce using rule 6 (statement -> if_statement .)
    SET             reduce using rule 6 (statement -> if_statement .)
    LOP             reduce using rule 6 (statement -> if_statement .)
    RET             reduce using rule 6 (statement -> if_statement .)
    IDENT           reduce using rule 6 (statement -> if_statement .)
    NEWLINE         reduce using rule 6 (statement -> if_statement .)
    NUMBER          reduce using rule 6 (statement -> if_statement .)
    STRING          reduce using rule 6 (statement -> if_statement .)
    BOOL            reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    NOT             reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    DEDENT          reduce using rule 6 (statement -> if_statement .)
    ELS             shift and go to state 28

    else_statement                 shift and go to state 27

state 6

    (7) statement -> def_statement .

    IFF             reduce using rule 7 (statement -> def_statement .)
    DEF             reduce using rule 7 (statement -> def_statement .)
    SET             reduce using rule 7 (statement -> def_statement .)
    LOP             reduce using rule 7 (statement -> def_statement .)
    RET             reduce using rule 7 (statement -> def_statement .)
    IDENT           reduce using rule 7 (statement -> def_statement .)
    NEWLINE         reduce using rule 7 (statement -> def_statement .)
    NUMBER          reduce using rule 7 (statement -> def_statement .)
    STRING          reduce using rule 7 (statement -> def_statement .)
    BOOL            reduce using rule 7 (statement -> def_statement .)
    LPAREN          reduce using rule 7 (statement -> def_statement .)
    NOT             reduce using rule 7 (statement -> def_statement .)
    $end            reduce using rule 7 (statement -> def_statement .)
    DEDENT          reduce using rule 7 (statement -> def_statement .)


state 7

    (8) statement -> set_statement .

    IFF             reduce using rule 8 (statement -> set_statement .)
    DEF             reduce using rule 8 (statement -> set_statement .)
    SET             reduce using rule 8 (statement -> set_statement .)
    LOP             reduce using rule 8 (statement -> set_statement .)
    RET             reduce using rule 8 (statement -> set_statement .)
    IDENT           reduce using rule 8 (statement -> set_statement .)
    NEWLINE         reduce using rule 8 (statement -> set_statement .)
    NUMBER          reduce using rule 8 (statement -> set_statement .)
    STRING          reduce using rule 8 (statement -> set_statement .)
    BOOL            reduce using rule 8 (statement -> set_statement .)
    LPAREN          reduce using rule 8 (statement -> set_statement .)
    NOT             reduce using rule 8 (statement -> set_statement .)
    $end            reduce using rule 8 (statement -> set_statement .)
    DEDENT          reduce using rule 8 (statement -> set_statement .)


state 8

    (9) statement -> loop_statement .

    IFF             reduce using rule 9 (statement -> loop_statement .)
    DEF             reduce using rule 9 (statement -> loop_statement .)
    SET             reduce using rule 9 (statement -> loop_statement .)
    LOP             reduce using rule 9 (statement -> loop_statement .)
    RET             reduce using rule 9 (statement -> loop_statement .)
    IDENT           reduce using rule 9 (statement -> loop_statement .)
    NEWLINE         reduce using rule 9 (statement -> loop_statement .)
    NUMBER          reduce using rule 9 (statement -> loop_statement .)
    STRING          reduce using rule 9 (statement -> loop_statement .)
    BOOL            reduce using rule 9 (statement -> loop_statement .)
    LPAREN          reduce using rule 9 (statement -> loop_statement .)
    NOT             reduce using rule 9 (statement -> loop_statement .)
    $end            reduce using rule 9 (statement -> loop_statement .)
    DEDENT          reduce using rule 9 (statement -> loop_statement .)


state 9

    (10) statement -> return_statement .

    IFF             reduce using rule 10 (statement -> return_statement .)
    DEF             reduce using rule 10 (statement -> return_statement .)
    SET             reduce using rule 10 (statement -> return_statement .)
    LOP             reduce using rule 10 (statement -> return_statement .)
    RET             reduce using rule 10 (statement -> return_statement .)
    IDENT           reduce using rule 10 (statement -> return_statement .)
    NEWLINE         reduce using rule 10 (statement -> return_statement .)
    NUMBER          reduce using rule 10 (statement -> return_statement .)
    STRING          reduce using rule 10 (statement -> return_statement .)
    BOOL            reduce using rule 10 (statement -> return_statement .)
    LPAREN          reduce using rule 10 (statement -> return_statement .)
    NOT             reduce using rule 10 (statement -> return_statement .)
    $end            reduce using rule 10 (statement -> return_statement .)
    DEDENT          reduce using rule 10 (statement -> return_statement .)


state 10

    (11) statement -> expression_statement .

    IFF             reduce using rule 11 (statement -> expression_statement .)
    DEF             reduce using rule 11 (statement -> expression_statement .)
    SET             reduce using rule 11 (statement -> expression_statement .)
    LOP             reduce using rule 11 (statement -> expression_statement .)
    RET             reduce using rule 11 (statement -> expression_statement .)
    IDENT           reduce using rule 11 (statement -> expression_statement .)
    NEWLINE         reduce using rule 11 (statement -> expression_statement .)
    NUMBER          reduce using rule 11 (statement -> expression_statement .)
    STRING          reduce using rule 11 (statement -> expression_statement .)
    BOOL            reduce using rule 11 (statement -> expression_statement .)
    LPAREN          reduce using rule 11 (statement -> expression_statement .)
    NOT             reduce using rule 11 (statement -> expression_statement .)
    $end            reduce using rule 11 (statement -> expression_statement .)
    DEDENT          reduce using rule 11 (statement -> expression_statement .)


state 11

    (12) statement -> function_call .
    (28) expression -> function_call .

  ! reduce/reduce conflict for IFF resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for DEF resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for SET resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for LOP resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for RET resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for NUMBER resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for BOOL resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for NOT resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for $end resolved using rule 12 (statement -> function_call .)
  ! reduce/reduce conflict for DEDENT resolved using rule 12 (statement -> function_call .)
    IFF             reduce using rule 12 (statement -> function_call .)
    DEF             reduce using rule 12 (statement -> function_call .)
    SET             reduce using rule 12 (statement -> function_call .)
    LOP             reduce using rule 12 (statement -> function_call .)
    RET             reduce using rule 12 (statement -> function_call .)
    IDENT           reduce using rule 12 (statement -> function_call .)
    NEWLINE         reduce using rule 12 (statement -> function_call .)
    NUMBER          reduce using rule 12 (statement -> function_call .)
    STRING          reduce using rule 12 (statement -> function_call .)
    BOOL            reduce using rule 12 (statement -> function_call .)
    LPAREN          reduce using rule 12 (statement -> function_call .)
    NOT             reduce using rule 12 (statement -> function_call .)
    $end            reduce using rule 12 (statement -> function_call .)
    DEDENT          reduce using rule 12 (statement -> function_call .)
    POWER           reduce using rule 28 (expression -> function_call .)
    MUL             reduce using rule 28 (expression -> function_call .)
    DIV             reduce using rule 28 (expression -> function_call .)
    PLUS            reduce using rule 28 (expression -> function_call .)
    MINUS           reduce using rule 28 (expression -> function_call .)
    MODULUS         reduce using rule 28 (expression -> function_call .)
    AND             reduce using rule 28 (expression -> function_call .)
    OR              reduce using rule 28 (expression -> function_call .)
    XOR             reduce using rule 28 (expression -> function_call .)
    NAND            reduce using rule 28 (expression -> function_call .)
    NOR             reduce using rule 28 (expression -> function_call .)
    XNOR            reduce using rule 28 (expression -> function_call .)
    EQUAL           reduce using rule 28 (expression -> function_call .)

  ! IFF             [ reduce using rule 28 (expression -> function_call .) ]
  ! DEF             [ reduce using rule 28 (expression -> function_call .) ]
  ! SET             [ reduce using rule 28 (expression -> function_call .) ]
  ! LOP             [ reduce using rule 28 (expression -> function_call .) ]
  ! RET             [ reduce using rule 28 (expression -> function_call .) ]
  ! IDENT           [ reduce using rule 28 (expression -> function_call .) ]
  ! NEWLINE         [ reduce using rule 28 (expression -> function_call .) ]
  ! NUMBER          [ reduce using rule 28 (expression -> function_call .) ]
  ! STRING          [ reduce using rule 28 (expression -> function_call .) ]
  ! BOOL            [ reduce using rule 28 (expression -> function_call .) ]
  ! LPAREN          [ reduce using rule 28 (expression -> function_call .) ]
  ! NOT             [ reduce using rule 28 (expression -> function_call .) ]
  ! $end            [ reduce using rule 28 (expression -> function_call .) ]
  ! DEDENT          [ reduce using rule 28 (expression -> function_call .) ]


state 12

    (13) statement -> blankspace .

    IFF             reduce using rule 13 (statement -> blankspace .)
    DEF             reduce using rule 13 (statement -> blankspace .)
    SET             reduce using rule 13 (statement -> blankspace .)
    LOP             reduce using rule 13 (statement -> blankspace .)
    RET             reduce using rule 13 (statement -> blankspace .)
    IDENT           reduce using rule 13 (statement -> blankspace .)
    NEWLINE         reduce using rule 13 (statement -> blankspace .)
    NUMBER          reduce using rule 13 (statement -> blankspace .)
    STRING          reduce using rule 13 (statement -> blankspace .)
    BOOL            reduce using rule 13 (statement -> blankspace .)
    LPAREN          reduce using rule 13 (statement -> blankspace .)
    NOT             reduce using rule 13 (statement -> blankspace .)
    $end            reduce using rule 13 (statement -> blankspace .)
    DEDENT          reduce using rule 13 (statement -> blankspace .)


state 13

    (16) if_statement -> IFF . expression block
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 29
    function_call                  shift and go to state 30

state 14

    (45) expression_statement -> expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    IFF             reduce using rule 45 (expression_statement -> expression .)
    DEF             reduce using rule 45 (expression_statement -> expression .)
    SET             reduce using rule 45 (expression_statement -> expression .)
    LOP             reduce using rule 45 (expression_statement -> expression .)
    RET             reduce using rule 45 (expression_statement -> expression .)
    IDENT           reduce using rule 45 (expression_statement -> expression .)
    NEWLINE         reduce using rule 45 (expression_statement -> expression .)
    NUMBER          reduce using rule 45 (expression_statement -> expression .)
    STRING          reduce using rule 45 (expression_statement -> expression .)
    BOOL            reduce using rule 45 (expression_statement -> expression .)
    LPAREN          reduce using rule 45 (expression_statement -> expression .)
    NOT             reduce using rule 45 (expression_statement -> expression .)
    $end            reduce using rule 45 (expression_statement -> expression .)
    DEDENT          reduce using rule 45 (expression_statement -> expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43


state 15

    (19) def_statement -> DEF . IDENT arg block

    IDENT           shift and go to state 44


state 16

    (15) function_call -> IDENT . arg
    (21) arg -> . expression
    (22) arg -> . arg expression
    (23) arg -> .
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    IFF             reduce using rule 23 (arg -> .)
    DEF             reduce using rule 23 (arg -> .)
    SET             reduce using rule 23 (arg -> .)
    LOP             reduce using rule 23 (arg -> .)
    RET             reduce using rule 23 (arg -> .)
    NEWLINE         reduce using rule 23 (arg -> .)
    $end            reduce using rule 23 (arg -> .)
    POWER           reduce using rule 23 (arg -> .)
    MUL             reduce using rule 23 (arg -> .)
    DIV             reduce using rule 23 (arg -> .)
    PLUS            reduce using rule 23 (arg -> .)
    MINUS           reduce using rule 23 (arg -> .)
    MODULUS         reduce using rule 23 (arg -> .)
    AND             reduce using rule 23 (arg -> .)
    OR              reduce using rule 23 (arg -> .)
    XOR             reduce using rule 23 (arg -> .)
    NAND            reduce using rule 23 (arg -> .)
    NOR             reduce using rule 23 (arg -> .)
    XNOR            reduce using rule 23 (arg -> .)
    EQUAL           reduce using rule 23 (arg -> .)
    INDENT          reduce using rule 23 (arg -> .)
    DEDENT          reduce using rule 23 (arg -> .)
    RPAREN          reduce using rule 23 (arg -> .)
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

  ! NUMBER          [ reduce using rule 23 (arg -> .) ]
  ! STRING          [ reduce using rule 23 (arg -> .) ]
  ! BOOL            [ reduce using rule 23 (arg -> .) ]
  ! LPAREN          [ reduce using rule 23 (arg -> .) ]
  ! NOT             [ reduce using rule 23 (arg -> .) ]
  ! IDENT           [ reduce using rule 23 (arg -> .) ]

    arg                            shift and go to state 45
    expression                     shift and go to state 46
    function_call                  shift and go to state 30

state 17

    (20) set_statement -> SET . IDENT expression

    IDENT           shift and go to state 47


state 18

    (24) loop_statement -> LOP . IDENT expression expression block

    IDENT           shift and go to state 48


state 19

    (44) return_statement -> RET . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 49
    function_call                  shift and go to state 30

state 20

    (14) blankspace -> NEWLINE .

    IFF             reduce using rule 14 (blankspace -> NEWLINE .)
    DEF             reduce using rule 14 (blankspace -> NEWLINE .)
    SET             reduce using rule 14 (blankspace -> NEWLINE .)
    LOP             reduce using rule 14 (blankspace -> NEWLINE .)
    RET             reduce using rule 14 (blankspace -> NEWLINE .)
    IDENT           reduce using rule 14 (blankspace -> NEWLINE .)
    NEWLINE         reduce using rule 14 (blankspace -> NEWLINE .)
    NUMBER          reduce using rule 14 (blankspace -> NEWLINE .)
    STRING          reduce using rule 14 (blankspace -> NEWLINE .)
    BOOL            reduce using rule 14 (blankspace -> NEWLINE .)
    LPAREN          reduce using rule 14 (blankspace -> NEWLINE .)
    NOT             reduce using rule 14 (blankspace -> NEWLINE .)
    $end            reduce using rule 14 (blankspace -> NEWLINE .)
    DEDENT          reduce using rule 14 (blankspace -> NEWLINE .)


state 21

    (25) expression -> NUMBER .

    POWER           reduce using rule 25 (expression -> NUMBER .)
    MUL             reduce using rule 25 (expression -> NUMBER .)
    DIV             reduce using rule 25 (expression -> NUMBER .)
    PLUS            reduce using rule 25 (expression -> NUMBER .)
    MINUS           reduce using rule 25 (expression -> NUMBER .)
    MODULUS         reduce using rule 25 (expression -> NUMBER .)
    AND             reduce using rule 25 (expression -> NUMBER .)
    OR              reduce using rule 25 (expression -> NUMBER .)
    XOR             reduce using rule 25 (expression -> NUMBER .)
    NAND            reduce using rule 25 (expression -> NUMBER .)
    NOR             reduce using rule 25 (expression -> NUMBER .)
    XNOR            reduce using rule 25 (expression -> NUMBER .)
    EQUAL           reduce using rule 25 (expression -> NUMBER .)
    IFF             reduce using rule 25 (expression -> NUMBER .)
    DEF             reduce using rule 25 (expression -> NUMBER .)
    SET             reduce using rule 25 (expression -> NUMBER .)
    LOP             reduce using rule 25 (expression -> NUMBER .)
    RET             reduce using rule 25 (expression -> NUMBER .)
    IDENT           reduce using rule 25 (expression -> NUMBER .)
    NEWLINE         reduce using rule 25 (expression -> NUMBER .)
    NUMBER          reduce using rule 25 (expression -> NUMBER .)
    STRING          reduce using rule 25 (expression -> NUMBER .)
    BOOL            reduce using rule 25 (expression -> NUMBER .)
    LPAREN          reduce using rule 25 (expression -> NUMBER .)
    NOT             reduce using rule 25 (expression -> NUMBER .)
    $end            reduce using rule 25 (expression -> NUMBER .)
    INDENT          reduce using rule 25 (expression -> NUMBER .)
    DEDENT          reduce using rule 25 (expression -> NUMBER .)
    RPAREN          reduce using rule 25 (expression -> NUMBER .)


state 22

    (26) expression -> STRING .

    POWER           reduce using rule 26 (expression -> STRING .)
    MUL             reduce using rule 26 (expression -> STRING .)
    DIV             reduce using rule 26 (expression -> STRING .)
    PLUS            reduce using rule 26 (expression -> STRING .)
    MINUS           reduce using rule 26 (expression -> STRING .)
    MODULUS         reduce using rule 26 (expression -> STRING .)
    AND             reduce using rule 26 (expression -> STRING .)
    OR              reduce using rule 26 (expression -> STRING .)
    XOR             reduce using rule 26 (expression -> STRING .)
    NAND            reduce using rule 26 (expression -> STRING .)
    NOR             reduce using rule 26 (expression -> STRING .)
    XNOR            reduce using rule 26 (expression -> STRING .)
    EQUAL           reduce using rule 26 (expression -> STRING .)
    IFF             reduce using rule 26 (expression -> STRING .)
    DEF             reduce using rule 26 (expression -> STRING .)
    SET             reduce using rule 26 (expression -> STRING .)
    LOP             reduce using rule 26 (expression -> STRING .)
    RET             reduce using rule 26 (expression -> STRING .)
    IDENT           reduce using rule 26 (expression -> STRING .)
    NEWLINE         reduce using rule 26 (expression -> STRING .)
    NUMBER          reduce using rule 26 (expression -> STRING .)
    STRING          reduce using rule 26 (expression -> STRING .)
    BOOL            reduce using rule 26 (expression -> STRING .)
    LPAREN          reduce using rule 26 (expression -> STRING .)
    NOT             reduce using rule 26 (expression -> STRING .)
    $end            reduce using rule 26 (expression -> STRING .)
    INDENT          reduce using rule 26 (expression -> STRING .)
    DEDENT          reduce using rule 26 (expression -> STRING .)
    RPAREN          reduce using rule 26 (expression -> STRING .)


state 23

    (27) expression -> BOOL .

    POWER           reduce using rule 27 (expression -> BOOL .)
    MUL             reduce using rule 27 (expression -> BOOL .)
    DIV             reduce using rule 27 (expression -> BOOL .)
    PLUS            reduce using rule 27 (expression -> BOOL .)
    MINUS           reduce using rule 27 (expression -> BOOL .)
    MODULUS         reduce using rule 27 (expression -> BOOL .)
    AND             reduce using rule 27 (expression -> BOOL .)
    OR              reduce using rule 27 (expression -> BOOL .)
    XOR             reduce using rule 27 (expression -> BOOL .)
    NAND            reduce using rule 27 (expression -> BOOL .)
    NOR             reduce using rule 27 (expression -> BOOL .)
    XNOR            reduce using rule 27 (expression -> BOOL .)
    EQUAL           reduce using rule 27 (expression -> BOOL .)
    IFF             reduce using rule 27 (expression -> BOOL .)
    DEF             reduce using rule 27 (expression -> BOOL .)
    SET             reduce using rule 27 (expression -> BOOL .)
    LOP             reduce using rule 27 (expression -> BOOL .)
    RET             reduce using rule 27 (expression -> BOOL .)
    IDENT           reduce using rule 27 (expression -> BOOL .)
    NEWLINE         reduce using rule 27 (expression -> BOOL .)
    NUMBER          reduce using rule 27 (expression -> BOOL .)
    STRING          reduce using rule 27 (expression -> BOOL .)
    BOOL            reduce using rule 27 (expression -> BOOL .)
    LPAREN          reduce using rule 27 (expression -> BOOL .)
    NOT             reduce using rule 27 (expression -> BOOL .)
    $end            reduce using rule 27 (expression -> BOOL .)
    INDENT          reduce using rule 27 (expression -> BOOL .)
    DEDENT          reduce using rule 27 (expression -> BOOL .)
    RPAREN          reduce using rule 27 (expression -> BOOL .)


state 24

    (29) expression -> LPAREN . expression RPAREN
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 50
    function_call                  shift and go to state 30

state 25

    (36) expression -> NOT . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 51
    function_call                  shift and go to state 30

state 26

    (4) statements -> statements statement .

    IFF             reduce using rule 4 (statements -> statements statement .)
    DEF             reduce using rule 4 (statements -> statements statement .)
    SET             reduce using rule 4 (statements -> statements statement .)
    LOP             reduce using rule 4 (statements -> statements statement .)
    RET             reduce using rule 4 (statements -> statements statement .)
    IDENT           reduce using rule 4 (statements -> statements statement .)
    NEWLINE         reduce using rule 4 (statements -> statements statement .)
    NUMBER          reduce using rule 4 (statements -> statements statement .)
    STRING          reduce using rule 4 (statements -> statements statement .)
    BOOL            reduce using rule 4 (statements -> statements statement .)
    LPAREN          reduce using rule 4 (statements -> statements statement .)
    NOT             reduce using rule 4 (statements -> statements statement .)
    $end            reduce using rule 4 (statements -> statements statement .)
    DEDENT          reduce using rule 4 (statements -> statements statement .)


state 27

    (17) if_else_statement -> if_statement else_statement .

    IFF             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    DEF             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    SET             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    LOP             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    RET             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    IDENT           reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    NEWLINE         reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    NUMBER          reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    STRING          reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    BOOL            reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    LPAREN          reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    NOT             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    $end            reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    DEDENT          reduce using rule 17 (if_else_statement -> if_statement else_statement .)


state 28

    (18) else_statement -> ELS . block
    (2) block -> . INDENT statements DEDENT

    INDENT          shift and go to state 53

    block                          shift and go to state 52

state 29

    (16) if_statement -> IFF expression . block
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression
    (2) block -> . INDENT statements DEDENT

    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43
    INDENT          shift and go to state 53

    block                          shift and go to state 54

state 30

    (28) expression -> function_call .

    POWER           reduce using rule 28 (expression -> function_call .)
    MUL             reduce using rule 28 (expression -> function_call .)
    DIV             reduce using rule 28 (expression -> function_call .)
    PLUS            reduce using rule 28 (expression -> function_call .)
    MINUS           reduce using rule 28 (expression -> function_call .)
    MODULUS         reduce using rule 28 (expression -> function_call .)
    AND             reduce using rule 28 (expression -> function_call .)
    OR              reduce using rule 28 (expression -> function_call .)
    XOR             reduce using rule 28 (expression -> function_call .)
    NAND            reduce using rule 28 (expression -> function_call .)
    NOR             reduce using rule 28 (expression -> function_call .)
    XNOR            reduce using rule 28 (expression -> function_call .)
    EQUAL           reduce using rule 28 (expression -> function_call .)
    INDENT          reduce using rule 28 (expression -> function_call .)
    NUMBER          reduce using rule 28 (expression -> function_call .)
    STRING          reduce using rule 28 (expression -> function_call .)
    BOOL            reduce using rule 28 (expression -> function_call .)
    LPAREN          reduce using rule 28 (expression -> function_call .)
    NOT             reduce using rule 28 (expression -> function_call .)
    IDENT           reduce using rule 28 (expression -> function_call .)
    IFF             reduce using rule 28 (expression -> function_call .)
    DEF             reduce using rule 28 (expression -> function_call .)
    SET             reduce using rule 28 (expression -> function_call .)
    LOP             reduce using rule 28 (expression -> function_call .)
    RET             reduce using rule 28 (expression -> function_call .)
    NEWLINE         reduce using rule 28 (expression -> function_call .)
    $end            reduce using rule 28 (expression -> function_call .)
    DEDENT          reduce using rule 28 (expression -> function_call .)
    RPAREN          reduce using rule 28 (expression -> function_call .)


state 31

    (30) expression -> expression POWER . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 55
    function_call                  shift and go to state 30

state 32

    (31) expression -> expression MUL . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 56
    function_call                  shift and go to state 30

state 33

    (32) expression -> expression DIV . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 57
    function_call                  shift and go to state 30

state 34

    (33) expression -> expression PLUS . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 58
    function_call                  shift and go to state 30

state 35

    (34) expression -> expression MINUS . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 59
    function_call                  shift and go to state 30

state 36

    (35) expression -> expression MODULUS . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 60
    function_call                  shift and go to state 30

state 37

    (37) expression -> expression AND . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 61
    function_call                  shift and go to state 30

state 38

    (38) expression -> expression OR . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 62
    function_call                  shift and go to state 30

state 39

    (39) expression -> expression XOR . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 63
    function_call                  shift and go to state 30

state 40

    (40) expression -> expression NAND . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 64
    function_call                  shift and go to state 30

state 41

    (41) expression -> expression NOR . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 65
    function_call                  shift and go to state 30

state 42

    (42) expression -> expression XNOR . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 66
    function_call                  shift and go to state 30

state 43

    (43) expression -> expression EQUAL . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 67
    function_call                  shift and go to state 30

state 44

    (19) def_statement -> DEF IDENT . arg block
    (21) arg -> . expression
    (22) arg -> . arg expression
    (23) arg -> .
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    INDENT          reduce using rule 23 (arg -> .)
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

  ! NUMBER          [ reduce using rule 23 (arg -> .) ]
  ! STRING          [ reduce using rule 23 (arg -> .) ]
  ! BOOL            [ reduce using rule 23 (arg -> .) ]
  ! LPAREN          [ reduce using rule 23 (arg -> .) ]
  ! NOT             [ reduce using rule 23 (arg -> .) ]
  ! IDENT           [ reduce using rule 23 (arg -> .) ]

    arg                            shift and go to state 68
    expression                     shift and go to state 46
    function_call                  shift and go to state 30

state 45

    (15) function_call -> IDENT arg .
    (22) arg -> arg . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    IFF             reduce using rule 15 (function_call -> IDENT arg .)
    DEF             reduce using rule 15 (function_call -> IDENT arg .)
    SET             reduce using rule 15 (function_call -> IDENT arg .)
    LOP             reduce using rule 15 (function_call -> IDENT arg .)
    RET             reduce using rule 15 (function_call -> IDENT arg .)
    NEWLINE         reduce using rule 15 (function_call -> IDENT arg .)
    $end            reduce using rule 15 (function_call -> IDENT arg .)
    POWER           reduce using rule 15 (function_call -> IDENT arg .)
    MUL             reduce using rule 15 (function_call -> IDENT arg .)
    DIV             reduce using rule 15 (function_call -> IDENT arg .)
    PLUS            reduce using rule 15 (function_call -> IDENT arg .)
    MINUS           reduce using rule 15 (function_call -> IDENT arg .)
    MODULUS         reduce using rule 15 (function_call -> IDENT arg .)
    AND             reduce using rule 15 (function_call -> IDENT arg .)
    OR              reduce using rule 15 (function_call -> IDENT arg .)
    XOR             reduce using rule 15 (function_call -> IDENT arg .)
    NAND            reduce using rule 15 (function_call -> IDENT arg .)
    NOR             reduce using rule 15 (function_call -> IDENT arg .)
    XNOR            reduce using rule 15 (function_call -> IDENT arg .)
    EQUAL           reduce using rule 15 (function_call -> IDENT arg .)
    INDENT          reduce using rule 15 (function_call -> IDENT arg .)
    DEDENT          reduce using rule 15 (function_call -> IDENT arg .)
    RPAREN          reduce using rule 15 (function_call -> IDENT arg .)
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

  ! IDENT           [ reduce using rule 15 (function_call -> IDENT arg .) ]
  ! NUMBER          [ reduce using rule 15 (function_call -> IDENT arg .) ]
  ! STRING          [ reduce using rule 15 (function_call -> IDENT arg .) ]
  ! BOOL            [ reduce using rule 15 (function_call -> IDENT arg .) ]
  ! LPAREN          [ reduce using rule 15 (function_call -> IDENT arg .) ]
  ! NOT             [ reduce using rule 15 (function_call -> IDENT arg .) ]

    expression                     shift and go to state 69
    function_call                  shift and go to state 30

state 46

    (21) arg -> expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NUMBER          reduce using rule 21 (arg -> expression .)
    STRING          reduce using rule 21 (arg -> expression .)
    BOOL            reduce using rule 21 (arg -> expression .)
    LPAREN          reduce using rule 21 (arg -> expression .)
    NOT             reduce using rule 21 (arg -> expression .)
    IDENT           reduce using rule 21 (arg -> expression .)
    IFF             reduce using rule 21 (arg -> expression .)
    DEF             reduce using rule 21 (arg -> expression .)
    SET             reduce using rule 21 (arg -> expression .)
    LOP             reduce using rule 21 (arg -> expression .)
    RET             reduce using rule 21 (arg -> expression .)
    NEWLINE         reduce using rule 21 (arg -> expression .)
    $end            reduce using rule 21 (arg -> expression .)
    INDENT          reduce using rule 21 (arg -> expression .)
    DEDENT          reduce using rule 21 (arg -> expression .)
    RPAREN          reduce using rule 21 (arg -> expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 21 (arg -> expression .) ]
  ! MUL             [ reduce using rule 21 (arg -> expression .) ]
  ! DIV             [ reduce using rule 21 (arg -> expression .) ]
  ! PLUS            [ reduce using rule 21 (arg -> expression .) ]
  ! MINUS           [ reduce using rule 21 (arg -> expression .) ]
  ! MODULUS         [ reduce using rule 21 (arg -> expression .) ]
  ! AND             [ reduce using rule 21 (arg -> expression .) ]
  ! OR              [ reduce using rule 21 (arg -> expression .) ]
  ! XOR             [ reduce using rule 21 (arg -> expression .) ]
  ! NAND            [ reduce using rule 21 (arg -> expression .) ]
  ! NOR             [ reduce using rule 21 (arg -> expression .) ]
  ! XNOR            [ reduce using rule 21 (arg -> expression .) ]
  ! EQUAL           [ reduce using rule 21 (arg -> expression .) ]


state 47

    (20) set_statement -> SET IDENT . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 70
    function_call                  shift and go to state 30

state 48

    (24) loop_statement -> LOP IDENT . expression expression block
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 71
    function_call                  shift and go to state 30

state 49

    (44) return_statement -> RET expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    IFF             reduce using rule 44 (return_statement -> RET expression .)
    DEF             reduce using rule 44 (return_statement -> RET expression .)
    SET             reduce using rule 44 (return_statement -> RET expression .)
    LOP             reduce using rule 44 (return_statement -> RET expression .)
    RET             reduce using rule 44 (return_statement -> RET expression .)
    IDENT           reduce using rule 44 (return_statement -> RET expression .)
    NEWLINE         reduce using rule 44 (return_statement -> RET expression .)
    NUMBER          reduce using rule 44 (return_statement -> RET expression .)
    STRING          reduce using rule 44 (return_statement -> RET expression .)
    BOOL            reduce using rule 44 (return_statement -> RET expression .)
    LPAREN          reduce using rule 44 (return_statement -> RET expression .)
    NOT             reduce using rule 44 (return_statement -> RET expression .)
    $end            reduce using rule 44 (return_statement -> RET expression .)
    DEDENT          reduce using rule 44 (return_statement -> RET expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43


state 50

    (29) expression -> LPAREN expression . RPAREN
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    RPAREN          shift and go to state 72
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43


state 51

    (36) expression -> NOT expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 36 (expression -> NOT expression .)
    DEF             reduce using rule 36 (expression -> NOT expression .)
    SET             reduce using rule 36 (expression -> NOT expression .)
    LOP             reduce using rule 36 (expression -> NOT expression .)
    RET             reduce using rule 36 (expression -> NOT expression .)
    IDENT           reduce using rule 36 (expression -> NOT expression .)
    NEWLINE         reduce using rule 36 (expression -> NOT expression .)
    NUMBER          reduce using rule 36 (expression -> NOT expression .)
    STRING          reduce using rule 36 (expression -> NOT expression .)
    BOOL            reduce using rule 36 (expression -> NOT expression .)
    LPAREN          reduce using rule 36 (expression -> NOT expression .)
    NOT             reduce using rule 36 (expression -> NOT expression .)
    $end            reduce using rule 36 (expression -> NOT expression .)
    INDENT          reduce using rule 36 (expression -> NOT expression .)
    DEDENT          reduce using rule 36 (expression -> NOT expression .)
    RPAREN          reduce using rule 36 (expression -> NOT expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 36 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! PLUS            [ reduce using rule 36 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> NOT expression .) ]
  ! MODULUS         [ reduce using rule 36 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 36 (expression -> NOT expression .) ]
  ! XOR             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! NAND            [ reduce using rule 36 (expression -> NOT expression .) ]
  ! NOR             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! XNOR            [ reduce using rule 36 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 36 (expression -> NOT expression .) ]


state 52

    (18) else_statement -> ELS block .

    IFF             reduce using rule 18 (else_statement -> ELS block .)
    DEF             reduce using rule 18 (else_statement -> ELS block .)
    SET             reduce using rule 18 (else_statement -> ELS block .)
    LOP             reduce using rule 18 (else_statement -> ELS block .)
    RET             reduce using rule 18 (else_statement -> ELS block .)
    IDENT           reduce using rule 18 (else_statement -> ELS block .)
    NEWLINE         reduce using rule 18 (else_statement -> ELS block .)
    NUMBER          reduce using rule 18 (else_statement -> ELS block .)
    STRING          reduce using rule 18 (else_statement -> ELS block .)
    BOOL            reduce using rule 18 (else_statement -> ELS block .)
    LPAREN          reduce using rule 18 (else_statement -> ELS block .)
    NOT             reduce using rule 18 (else_statement -> ELS block .)
    $end            reduce using rule 18 (else_statement -> ELS block .)
    DEDENT          reduce using rule 18 (else_statement -> ELS block .)


state 53

    (2) block -> INDENT . statements DEDENT
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statement -> . if_else_statement
    (6) statement -> . if_statement
    (7) statement -> . def_statement
    (8) statement -> . set_statement
    (9) statement -> . loop_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . function_call
    (13) statement -> . blankspace
    (17) if_else_statement -> . if_statement else_statement
    (16) if_statement -> . IFF expression block
    (19) def_statement -> . DEF IDENT arg block
    (20) set_statement -> . SET IDENT expression
    (24) loop_statement -> . LOP IDENT expression expression block
    (44) return_statement -> . RET expression
    (45) expression_statement -> . expression
    (15) function_call -> . IDENT arg
    (14) blankspace -> . NEWLINE
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression

    IFF             shift and go to state 13
    DEF             shift and go to state 15
    SET             shift and go to state 17
    LOP             shift and go to state 18
    RET             shift and go to state 19
    IDENT           shift and go to state 16
    NEWLINE         shift and go to state 20
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25

    statements                     shift and go to state 73
    statement                      shift and go to state 3
    if_else_statement              shift and go to state 4
    if_statement                   shift and go to state 5
    def_statement                  shift and go to state 6
    set_statement                  shift and go to state 7
    loop_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    expression_statement           shift and go to state 10
    function_call                  shift and go to state 11
    blankspace                     shift and go to state 12
    expression                     shift and go to state 14

state 54

    (16) if_statement -> IFF expression block .

    ELS             reduce using rule 16 (if_statement -> IFF expression block .)
    IFF             reduce using rule 16 (if_statement -> IFF expression block .)
    DEF             reduce using rule 16 (if_statement -> IFF expression block .)
    SET             reduce using rule 16 (if_statement -> IFF expression block .)
    LOP             reduce using rule 16 (if_statement -> IFF expression block .)
    RET             reduce using rule 16 (if_statement -> IFF expression block .)
    IDENT           reduce using rule 16 (if_statement -> IFF expression block .)
    NEWLINE         reduce using rule 16 (if_statement -> IFF expression block .)
    NUMBER          reduce using rule 16 (if_statement -> IFF expression block .)
    STRING          reduce using rule 16 (if_statement -> IFF expression block .)
    BOOL            reduce using rule 16 (if_statement -> IFF expression block .)
    LPAREN          reduce using rule 16 (if_statement -> IFF expression block .)
    NOT             reduce using rule 16 (if_statement -> IFF expression block .)
    $end            reduce using rule 16 (if_statement -> IFF expression block .)
    DEDENT          reduce using rule 16 (if_statement -> IFF expression block .)


state 55

    (30) expression -> expression POWER expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    MUL             reduce using rule 30 (expression -> expression POWER expression .)
    DIV             reduce using rule 30 (expression -> expression POWER expression .)
    PLUS            reduce using rule 30 (expression -> expression POWER expression .)
    MINUS           reduce using rule 30 (expression -> expression POWER expression .)
    MODULUS         reduce using rule 30 (expression -> expression POWER expression .)
    AND             reduce using rule 30 (expression -> expression POWER expression .)
    OR              reduce using rule 30 (expression -> expression POWER expression .)
    XOR             reduce using rule 30 (expression -> expression POWER expression .)
    NAND            reduce using rule 30 (expression -> expression POWER expression .)
    NOR             reduce using rule 30 (expression -> expression POWER expression .)
    XNOR            reduce using rule 30 (expression -> expression POWER expression .)
    EQUAL           reduce using rule 30 (expression -> expression POWER expression .)
    IFF             reduce using rule 30 (expression -> expression POWER expression .)
    DEF             reduce using rule 30 (expression -> expression POWER expression .)
    SET             reduce using rule 30 (expression -> expression POWER expression .)
    LOP             reduce using rule 30 (expression -> expression POWER expression .)
    RET             reduce using rule 30 (expression -> expression POWER expression .)
    IDENT           reduce using rule 30 (expression -> expression POWER expression .)
    NEWLINE         reduce using rule 30 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 30 (expression -> expression POWER expression .)
    STRING          reduce using rule 30 (expression -> expression POWER expression .)
    BOOL            reduce using rule 30 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 30 (expression -> expression POWER expression .)
    NOT             reduce using rule 30 (expression -> expression POWER expression .)
    $end            reduce using rule 30 (expression -> expression POWER expression .)
    INDENT          reduce using rule 30 (expression -> expression POWER expression .)
    DEDENT          reduce using rule 30 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 30 (expression -> expression POWER expression .)
    POWER           shift and go to state 31

  ! POWER           [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! MUL             [ shift and go to state 32 ]
  ! DIV             [ shift and go to state 33 ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MODULUS         [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 39 ]
  ! NAND            [ shift and go to state 40 ]
  ! NOR             [ shift and go to state 41 ]
  ! XNOR            [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]


state 56

    (31) expression -> expression MUL expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    MUL             reduce using rule 31 (expression -> expression MUL expression .)
    DIV             reduce using rule 31 (expression -> expression MUL expression .)
    PLUS            reduce using rule 31 (expression -> expression MUL expression .)
    MINUS           reduce using rule 31 (expression -> expression MUL expression .)
    MODULUS         reduce using rule 31 (expression -> expression MUL expression .)
    AND             reduce using rule 31 (expression -> expression MUL expression .)
    OR              reduce using rule 31 (expression -> expression MUL expression .)
    XOR             reduce using rule 31 (expression -> expression MUL expression .)
    NAND            reduce using rule 31 (expression -> expression MUL expression .)
    NOR             reduce using rule 31 (expression -> expression MUL expression .)
    XNOR            reduce using rule 31 (expression -> expression MUL expression .)
    EQUAL           reduce using rule 31 (expression -> expression MUL expression .)
    IFF             reduce using rule 31 (expression -> expression MUL expression .)
    DEF             reduce using rule 31 (expression -> expression MUL expression .)
    SET             reduce using rule 31 (expression -> expression MUL expression .)
    LOP             reduce using rule 31 (expression -> expression MUL expression .)
    RET             reduce using rule 31 (expression -> expression MUL expression .)
    IDENT           reduce using rule 31 (expression -> expression MUL expression .)
    NEWLINE         reduce using rule 31 (expression -> expression MUL expression .)
    NUMBER          reduce using rule 31 (expression -> expression MUL expression .)
    STRING          reduce using rule 31 (expression -> expression MUL expression .)
    BOOL            reduce using rule 31 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 31 (expression -> expression MUL expression .)
    NOT             reduce using rule 31 (expression -> expression MUL expression .)
    $end            reduce using rule 31 (expression -> expression MUL expression .)
    INDENT          reduce using rule 31 (expression -> expression MUL expression .)
    DEDENT          reduce using rule 31 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 31 (expression -> expression MUL expression .)
    POWER           shift and go to state 31

  ! POWER           [ reduce using rule 31 (expression -> expression MUL expression .) ]
  ! MUL             [ shift and go to state 32 ]
  ! DIV             [ shift and go to state 33 ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MODULUS         [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 39 ]
  ! NAND            [ shift and go to state 40 ]
  ! NOR             [ shift and go to state 41 ]
  ! XNOR            [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]


state 57

    (32) expression -> expression DIV expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    MUL             reduce using rule 32 (expression -> expression DIV expression .)
    DIV             reduce using rule 32 (expression -> expression DIV expression .)
    PLUS            reduce using rule 32 (expression -> expression DIV expression .)
    MINUS           reduce using rule 32 (expression -> expression DIV expression .)
    MODULUS         reduce using rule 32 (expression -> expression DIV expression .)
    AND             reduce using rule 32 (expression -> expression DIV expression .)
    OR              reduce using rule 32 (expression -> expression DIV expression .)
    XOR             reduce using rule 32 (expression -> expression DIV expression .)
    NAND            reduce using rule 32 (expression -> expression DIV expression .)
    NOR             reduce using rule 32 (expression -> expression DIV expression .)
    XNOR            reduce using rule 32 (expression -> expression DIV expression .)
    EQUAL           reduce using rule 32 (expression -> expression DIV expression .)
    IFF             reduce using rule 32 (expression -> expression DIV expression .)
    DEF             reduce using rule 32 (expression -> expression DIV expression .)
    SET             reduce using rule 32 (expression -> expression DIV expression .)
    LOP             reduce using rule 32 (expression -> expression DIV expression .)
    RET             reduce using rule 32 (expression -> expression DIV expression .)
    IDENT           reduce using rule 32 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 32 (expression -> expression DIV expression .)
    NUMBER          reduce using rule 32 (expression -> expression DIV expression .)
    STRING          reduce using rule 32 (expression -> expression DIV expression .)
    BOOL            reduce using rule 32 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 32 (expression -> expression DIV expression .)
    NOT             reduce using rule 32 (expression -> expression DIV expression .)
    $end            reduce using rule 32 (expression -> expression DIV expression .)
    INDENT          reduce using rule 32 (expression -> expression DIV expression .)
    DEDENT          reduce using rule 32 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 32 (expression -> expression DIV expression .)
    POWER           shift and go to state 31

  ! POWER           [ reduce using rule 32 (expression -> expression DIV expression .) ]
  ! MUL             [ shift and go to state 32 ]
  ! DIV             [ shift and go to state 33 ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MODULUS         [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 39 ]
  ! NAND            [ shift and go to state 40 ]
  ! NOR             [ shift and go to state 41 ]
  ! XNOR            [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]


state 58

    (33) expression -> expression PLUS expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    PLUS            reduce using rule 33 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 33 (expression -> expression PLUS expression .)
    AND             reduce using rule 33 (expression -> expression PLUS expression .)
    OR              reduce using rule 33 (expression -> expression PLUS expression .)
    XOR             reduce using rule 33 (expression -> expression PLUS expression .)
    NAND            reduce using rule 33 (expression -> expression PLUS expression .)
    NOR             reduce using rule 33 (expression -> expression PLUS expression .)
    XNOR            reduce using rule 33 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 33 (expression -> expression PLUS expression .)
    IFF             reduce using rule 33 (expression -> expression PLUS expression .)
    DEF             reduce using rule 33 (expression -> expression PLUS expression .)
    SET             reduce using rule 33 (expression -> expression PLUS expression .)
    LOP             reduce using rule 33 (expression -> expression PLUS expression .)
    RET             reduce using rule 33 (expression -> expression PLUS expression .)
    IDENT           reduce using rule 33 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 33 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 33 (expression -> expression PLUS expression .)
    STRING          reduce using rule 33 (expression -> expression PLUS expression .)
    BOOL            reduce using rule 33 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 33 (expression -> expression PLUS expression .)
    NOT             reduce using rule 33 (expression -> expression PLUS expression .)
    $end            reduce using rule 33 (expression -> expression PLUS expression .)
    INDENT          reduce using rule 33 (expression -> expression PLUS expression .)
    DEDENT          reduce using rule 33 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 33 (expression -> expression PLUS expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 36

  ! POWER           [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! MUL             [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 39 ]
  ! NAND            [ shift and go to state 40 ]
  ! NOR             [ shift and go to state 41 ]
  ! XNOR            [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]


state 59

    (34) expression -> expression MINUS expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    PLUS            reduce using rule 34 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 34 (expression -> expression MINUS expression .)
    AND             reduce using rule 34 (expression -> expression MINUS expression .)
    OR              reduce using rule 34 (expression -> expression MINUS expression .)
    XOR             reduce using rule 34 (expression -> expression MINUS expression .)
    NAND            reduce using rule 34 (expression -> expression MINUS expression .)
    NOR             reduce using rule 34 (expression -> expression MINUS expression .)
    XNOR            reduce using rule 34 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 34 (expression -> expression MINUS expression .)
    IFF             reduce using rule 34 (expression -> expression MINUS expression .)
    DEF             reduce using rule 34 (expression -> expression MINUS expression .)
    SET             reduce using rule 34 (expression -> expression MINUS expression .)
    LOP             reduce using rule 34 (expression -> expression MINUS expression .)
    RET             reduce using rule 34 (expression -> expression MINUS expression .)
    IDENT           reduce using rule 34 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 34 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 34 (expression -> expression MINUS expression .)
    STRING          reduce using rule 34 (expression -> expression MINUS expression .)
    BOOL            reduce using rule 34 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 34 (expression -> expression MINUS expression .)
    NOT             reduce using rule 34 (expression -> expression MINUS expression .)
    $end            reduce using rule 34 (expression -> expression MINUS expression .)
    INDENT          reduce using rule 34 (expression -> expression MINUS expression .)
    DEDENT          reduce using rule 34 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 34 (expression -> expression MINUS expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    MODULUS         shift and go to state 36

  ! POWER           [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 39 ]
  ! NAND            [ shift and go to state 40 ]
  ! NOR             [ shift and go to state 41 ]
  ! XNOR            [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]


state 60

    (35) expression -> expression MODULUS expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    MUL             reduce using rule 35 (expression -> expression MODULUS expression .)
    DIV             reduce using rule 35 (expression -> expression MODULUS expression .)
    PLUS            reduce using rule 35 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 35 (expression -> expression MODULUS expression .)
    MODULUS         reduce using rule 35 (expression -> expression MODULUS expression .)
    AND             reduce using rule 35 (expression -> expression MODULUS expression .)
    OR              reduce using rule 35 (expression -> expression MODULUS expression .)
    XOR             reduce using rule 35 (expression -> expression MODULUS expression .)
    NAND            reduce using rule 35 (expression -> expression MODULUS expression .)
    NOR             reduce using rule 35 (expression -> expression MODULUS expression .)
    XNOR            reduce using rule 35 (expression -> expression MODULUS expression .)
    EQUAL           reduce using rule 35 (expression -> expression MODULUS expression .)
    IFF             reduce using rule 35 (expression -> expression MODULUS expression .)
    DEF             reduce using rule 35 (expression -> expression MODULUS expression .)
    SET             reduce using rule 35 (expression -> expression MODULUS expression .)
    LOP             reduce using rule 35 (expression -> expression MODULUS expression .)
    RET             reduce using rule 35 (expression -> expression MODULUS expression .)
    IDENT           reduce using rule 35 (expression -> expression MODULUS expression .)
    NEWLINE         reduce using rule 35 (expression -> expression MODULUS expression .)
    NUMBER          reduce using rule 35 (expression -> expression MODULUS expression .)
    STRING          reduce using rule 35 (expression -> expression MODULUS expression .)
    BOOL            reduce using rule 35 (expression -> expression MODULUS expression .)
    LPAREN          reduce using rule 35 (expression -> expression MODULUS expression .)
    NOT             reduce using rule 35 (expression -> expression MODULUS expression .)
    $end            reduce using rule 35 (expression -> expression MODULUS expression .)
    INDENT          reduce using rule 35 (expression -> expression MODULUS expression .)
    DEDENT          reduce using rule 35 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 35 (expression -> expression MODULUS expression .)
    POWER           shift and go to state 31

  ! POWER           [ reduce using rule 35 (expression -> expression MODULUS expression .) ]
  ! MUL             [ shift and go to state 32 ]
  ! DIV             [ shift and go to state 33 ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MODULUS         [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! XOR             [ shift and go to state 39 ]
  ! NAND            [ shift and go to state 40 ]
  ! NOR             [ shift and go to state 41 ]
  ! XNOR            [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]


state 61

    (37) expression -> expression AND expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 37 (expression -> expression AND expression .)
    DEF             reduce using rule 37 (expression -> expression AND expression .)
    SET             reduce using rule 37 (expression -> expression AND expression .)
    LOP             reduce using rule 37 (expression -> expression AND expression .)
    RET             reduce using rule 37 (expression -> expression AND expression .)
    IDENT           reduce using rule 37 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 37 (expression -> expression AND expression .)
    NUMBER          reduce using rule 37 (expression -> expression AND expression .)
    STRING          reduce using rule 37 (expression -> expression AND expression .)
    BOOL            reduce using rule 37 (expression -> expression AND expression .)
    LPAREN          reduce using rule 37 (expression -> expression AND expression .)
    NOT             reduce using rule 37 (expression -> expression AND expression .)
    $end            reduce using rule 37 (expression -> expression AND expression .)
    INDENT          reduce using rule 37 (expression -> expression AND expression .)
    DEDENT          reduce using rule 37 (expression -> expression AND expression .)
    RPAREN          reduce using rule 37 (expression -> expression AND expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MUL             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! XOR             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! NAND            [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! NOR             [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! XNOR            [ reduce using rule 37 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 37 (expression -> expression AND expression .) ]


state 62

    (38) expression -> expression OR expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 38 (expression -> expression OR expression .)
    DEF             reduce using rule 38 (expression -> expression OR expression .)
    SET             reduce using rule 38 (expression -> expression OR expression .)
    LOP             reduce using rule 38 (expression -> expression OR expression .)
    RET             reduce using rule 38 (expression -> expression OR expression .)
    IDENT           reduce using rule 38 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 38 (expression -> expression OR expression .)
    NUMBER          reduce using rule 38 (expression -> expression OR expression .)
    STRING          reduce using rule 38 (expression -> expression OR expression .)
    BOOL            reduce using rule 38 (expression -> expression OR expression .)
    LPAREN          reduce using rule 38 (expression -> expression OR expression .)
    NOT             reduce using rule 38 (expression -> expression OR expression .)
    $end            reduce using rule 38 (expression -> expression OR expression .)
    INDENT          reduce using rule 38 (expression -> expression OR expression .)
    DEDENT          reduce using rule 38 (expression -> expression OR expression .)
    RPAREN          reduce using rule 38 (expression -> expression OR expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! MUL             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! NAND            [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! NOR             [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! XNOR            [ reduce using rule 38 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 38 (expression -> expression OR expression .) ]


state 63

    (39) expression -> expression XOR expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 39 (expression -> expression XOR expression .)
    DEF             reduce using rule 39 (expression -> expression XOR expression .)
    SET             reduce using rule 39 (expression -> expression XOR expression .)
    LOP             reduce using rule 39 (expression -> expression XOR expression .)
    RET             reduce using rule 39 (expression -> expression XOR expression .)
    IDENT           reduce using rule 39 (expression -> expression XOR expression .)
    NEWLINE         reduce using rule 39 (expression -> expression XOR expression .)
    NUMBER          reduce using rule 39 (expression -> expression XOR expression .)
    STRING          reduce using rule 39 (expression -> expression XOR expression .)
    BOOL            reduce using rule 39 (expression -> expression XOR expression .)
    LPAREN          reduce using rule 39 (expression -> expression XOR expression .)
    NOT             reduce using rule 39 (expression -> expression XOR expression .)
    $end            reduce using rule 39 (expression -> expression XOR expression .)
    INDENT          reduce using rule 39 (expression -> expression XOR expression .)
    DEDENT          reduce using rule 39 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 39 (expression -> expression XOR expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! MUL             [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! PLUS            [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! MODULUS         [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! OR              [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! XOR             [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! NAND            [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! NOR             [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! XNOR            [ reduce using rule 39 (expression -> expression XOR expression .) ]
  ! EQUAL           [ reduce using rule 39 (expression -> expression XOR expression .) ]


state 64

    (40) expression -> expression NAND expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 40 (expression -> expression NAND expression .)
    DEF             reduce using rule 40 (expression -> expression NAND expression .)
    SET             reduce using rule 40 (expression -> expression NAND expression .)
    LOP             reduce using rule 40 (expression -> expression NAND expression .)
    RET             reduce using rule 40 (expression -> expression NAND expression .)
    IDENT           reduce using rule 40 (expression -> expression NAND expression .)
    NEWLINE         reduce using rule 40 (expression -> expression NAND expression .)
    NUMBER          reduce using rule 40 (expression -> expression NAND expression .)
    STRING          reduce using rule 40 (expression -> expression NAND expression .)
    BOOL            reduce using rule 40 (expression -> expression NAND expression .)
    LPAREN          reduce using rule 40 (expression -> expression NAND expression .)
    NOT             reduce using rule 40 (expression -> expression NAND expression .)
    $end            reduce using rule 40 (expression -> expression NAND expression .)
    INDENT          reduce using rule 40 (expression -> expression NAND expression .)
    DEDENT          reduce using rule 40 (expression -> expression NAND expression .)
    RPAREN          reduce using rule 40 (expression -> expression NAND expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! MUL             [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! DIV             [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! PLUS            [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! MODULUS         [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! XOR             [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! NAND            [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! NOR             [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! XNOR            [ reduce using rule 40 (expression -> expression NAND expression .) ]
  ! EQUAL           [ reduce using rule 40 (expression -> expression NAND expression .) ]


state 65

    (41) expression -> expression NOR expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 41 (expression -> expression NOR expression .)
    DEF             reduce using rule 41 (expression -> expression NOR expression .)
    SET             reduce using rule 41 (expression -> expression NOR expression .)
    LOP             reduce using rule 41 (expression -> expression NOR expression .)
    RET             reduce using rule 41 (expression -> expression NOR expression .)
    IDENT           reduce using rule 41 (expression -> expression NOR expression .)
    NEWLINE         reduce using rule 41 (expression -> expression NOR expression .)
    NUMBER          reduce using rule 41 (expression -> expression NOR expression .)
    STRING          reduce using rule 41 (expression -> expression NOR expression .)
    BOOL            reduce using rule 41 (expression -> expression NOR expression .)
    LPAREN          reduce using rule 41 (expression -> expression NOR expression .)
    NOT             reduce using rule 41 (expression -> expression NOR expression .)
    $end            reduce using rule 41 (expression -> expression NOR expression .)
    INDENT          reduce using rule 41 (expression -> expression NOR expression .)
    DEDENT          reduce using rule 41 (expression -> expression NOR expression .)
    RPAREN          reduce using rule 41 (expression -> expression NOR expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! MUL             [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! DIV             [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! PLUS            [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! MODULUS         [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! AND             [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! OR              [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! XOR             [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! NAND            [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! NOR             [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! XNOR            [ reduce using rule 41 (expression -> expression NOR expression .) ]
  ! EQUAL           [ reduce using rule 41 (expression -> expression NOR expression .) ]


state 66

    (42) expression -> expression XNOR expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 42 (expression -> expression XNOR expression .)
    DEF             reduce using rule 42 (expression -> expression XNOR expression .)
    SET             reduce using rule 42 (expression -> expression XNOR expression .)
    LOP             reduce using rule 42 (expression -> expression XNOR expression .)
    RET             reduce using rule 42 (expression -> expression XNOR expression .)
    IDENT           reduce using rule 42 (expression -> expression XNOR expression .)
    NEWLINE         reduce using rule 42 (expression -> expression XNOR expression .)
    NUMBER          reduce using rule 42 (expression -> expression XNOR expression .)
    STRING          reduce using rule 42 (expression -> expression XNOR expression .)
    BOOL            reduce using rule 42 (expression -> expression XNOR expression .)
    LPAREN          reduce using rule 42 (expression -> expression XNOR expression .)
    NOT             reduce using rule 42 (expression -> expression XNOR expression .)
    $end            reduce using rule 42 (expression -> expression XNOR expression .)
    INDENT          reduce using rule 42 (expression -> expression XNOR expression .)
    DEDENT          reduce using rule 42 (expression -> expression XNOR expression .)
    RPAREN          reduce using rule 42 (expression -> expression XNOR expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! MUL             [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! DIV             [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! PLUS            [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! MODULUS         [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! XOR             [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! NAND            [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! NOR             [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! XNOR            [ reduce using rule 42 (expression -> expression XNOR expression .) ]
  ! EQUAL           [ reduce using rule 42 (expression -> expression XNOR expression .) ]


state 67

    (43) expression -> expression EQUAL expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    IFF             reduce using rule 43 (expression -> expression EQUAL expression .)
    DEF             reduce using rule 43 (expression -> expression EQUAL expression .)
    SET             reduce using rule 43 (expression -> expression EQUAL expression .)
    LOP             reduce using rule 43 (expression -> expression EQUAL expression .)
    RET             reduce using rule 43 (expression -> expression EQUAL expression .)
    IDENT           reduce using rule 43 (expression -> expression EQUAL expression .)
    NEWLINE         reduce using rule 43 (expression -> expression EQUAL expression .)
    NUMBER          reduce using rule 43 (expression -> expression EQUAL expression .)
    STRING          reduce using rule 43 (expression -> expression EQUAL expression .)
    BOOL            reduce using rule 43 (expression -> expression EQUAL expression .)
    LPAREN          reduce using rule 43 (expression -> expression EQUAL expression .)
    NOT             reduce using rule 43 (expression -> expression EQUAL expression .)
    $end            reduce using rule 43 (expression -> expression EQUAL expression .)
    INDENT          reduce using rule 43 (expression -> expression EQUAL expression .)
    DEDENT          reduce using rule 43 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 43 (expression -> expression EQUAL expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! MUL             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! DIV             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! XOR             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! NAND            [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! NOR             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! XNOR            [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 43 (expression -> expression EQUAL expression .) ]


state 68

    (19) def_statement -> DEF IDENT arg . block
    (22) arg -> arg . expression
    (2) block -> . INDENT statements DEDENT
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    INDENT          shift and go to state 53
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    block                          shift and go to state 74
    expression                     shift and go to state 69
    function_call                  shift and go to state 30

state 69

    (22) arg -> arg expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NUMBER          reduce using rule 22 (arg -> arg expression .)
    STRING          reduce using rule 22 (arg -> arg expression .)
    BOOL            reduce using rule 22 (arg -> arg expression .)
    LPAREN          reduce using rule 22 (arg -> arg expression .)
    NOT             reduce using rule 22 (arg -> arg expression .)
    IDENT           reduce using rule 22 (arg -> arg expression .)
    IFF             reduce using rule 22 (arg -> arg expression .)
    DEF             reduce using rule 22 (arg -> arg expression .)
    SET             reduce using rule 22 (arg -> arg expression .)
    LOP             reduce using rule 22 (arg -> arg expression .)
    RET             reduce using rule 22 (arg -> arg expression .)
    NEWLINE         reduce using rule 22 (arg -> arg expression .)
    $end            reduce using rule 22 (arg -> arg expression .)
    INDENT          reduce using rule 22 (arg -> arg expression .)
    DEDENT          reduce using rule 22 (arg -> arg expression .)
    RPAREN          reduce using rule 22 (arg -> arg expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43

  ! POWER           [ reduce using rule 22 (arg -> arg expression .) ]
  ! MUL             [ reduce using rule 22 (arg -> arg expression .) ]
  ! DIV             [ reduce using rule 22 (arg -> arg expression .) ]
  ! PLUS            [ reduce using rule 22 (arg -> arg expression .) ]
  ! MINUS           [ reduce using rule 22 (arg -> arg expression .) ]
  ! MODULUS         [ reduce using rule 22 (arg -> arg expression .) ]
  ! AND             [ reduce using rule 22 (arg -> arg expression .) ]
  ! OR              [ reduce using rule 22 (arg -> arg expression .) ]
  ! XOR             [ reduce using rule 22 (arg -> arg expression .) ]
  ! NAND            [ reduce using rule 22 (arg -> arg expression .) ]
  ! NOR             [ reduce using rule 22 (arg -> arg expression .) ]
  ! XNOR            [ reduce using rule 22 (arg -> arg expression .) ]
  ! EQUAL           [ reduce using rule 22 (arg -> arg expression .) ]


state 70

    (20) set_statement -> SET IDENT expression .
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression

    IFF             reduce using rule 20 (set_statement -> SET IDENT expression .)
    DEF             reduce using rule 20 (set_statement -> SET IDENT expression .)
    SET             reduce using rule 20 (set_statement -> SET IDENT expression .)
    LOP             reduce using rule 20 (set_statement -> SET IDENT expression .)
    RET             reduce using rule 20 (set_statement -> SET IDENT expression .)
    IDENT           reduce using rule 20 (set_statement -> SET IDENT expression .)
    NEWLINE         reduce using rule 20 (set_statement -> SET IDENT expression .)
    NUMBER          reduce using rule 20 (set_statement -> SET IDENT expression .)
    STRING          reduce using rule 20 (set_statement -> SET IDENT expression .)
    BOOL            reduce using rule 20 (set_statement -> SET IDENT expression .)
    LPAREN          reduce using rule 20 (set_statement -> SET IDENT expression .)
    NOT             reduce using rule 20 (set_statement -> SET IDENT expression .)
    $end            reduce using rule 20 (set_statement -> SET IDENT expression .)
    DEDENT          reduce using rule 20 (set_statement -> SET IDENT expression .)
    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43


state 71

    (24) loop_statement -> LOP IDENT expression . expression block
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression
    (15) function_call -> . IDENT arg

    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25
    IDENT           shift and go to state 16

    expression                     shift and go to state 75
    function_call                  shift and go to state 30

state 72

    (29) expression -> LPAREN expression RPAREN .

    POWER           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    NAND            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    NOR             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    XNOR            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    IFF             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    SET             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LOP             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    RET             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    IDENT           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    BOOL            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    INDENT          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    DEDENT          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 29 (expression -> LPAREN expression RPAREN .)


state 73

    (2) block -> INDENT statements . DEDENT
    (4) statements -> statements . statement
    (5) statement -> . if_else_statement
    (6) statement -> . if_statement
    (7) statement -> . def_statement
    (8) statement -> . set_statement
    (9) statement -> . loop_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . function_call
    (13) statement -> . blankspace
    (17) if_else_statement -> . if_statement else_statement
    (16) if_statement -> . IFF expression block
    (19) def_statement -> . DEF IDENT arg block
    (20) set_statement -> . SET IDENT expression
    (24) loop_statement -> . LOP IDENT expression expression block
    (44) return_statement -> . RET expression
    (45) expression_statement -> . expression
    (15) function_call -> . IDENT arg
    (14) blankspace -> . NEWLINE
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOL
    (28) expression -> . function_call
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression POWER expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression DIV expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression MODULUS expression
    (36) expression -> . NOT expression
    (37) expression -> . expression AND expression
    (38) expression -> . expression OR expression
    (39) expression -> . expression XOR expression
    (40) expression -> . expression NAND expression
    (41) expression -> . expression NOR expression
    (42) expression -> . expression XNOR expression
    (43) expression -> . expression EQUAL expression

    DEDENT          shift and go to state 76
    IFF             shift and go to state 13
    DEF             shift and go to state 15
    SET             shift and go to state 17
    LOP             shift and go to state 18
    RET             shift and go to state 19
    IDENT           shift and go to state 16
    NEWLINE         shift and go to state 20
    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 24
    NOT             shift and go to state 25

    statement                      shift and go to state 26
    if_else_statement              shift and go to state 4
    if_statement                   shift and go to state 5
    def_statement                  shift and go to state 6
    set_statement                  shift and go to state 7
    loop_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    expression_statement           shift and go to state 10
    function_call                  shift and go to state 11
    blankspace                     shift and go to state 12
    expression                     shift and go to state 14

state 74

    (19) def_statement -> DEF IDENT arg block .

    IFF             reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    DEF             reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    SET             reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    LOP             reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    RET             reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    IDENT           reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    NEWLINE         reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    NUMBER          reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    STRING          reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    BOOL            reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    LPAREN          reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    NOT             reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    $end            reduce using rule 19 (def_statement -> DEF IDENT arg block .)
    DEDENT          reduce using rule 19 (def_statement -> DEF IDENT arg block .)


state 75

    (24) loop_statement -> LOP IDENT expression expression . block
    (30) expression -> expression . POWER expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . DIV expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . MODULUS expression
    (37) expression -> expression . AND expression
    (38) expression -> expression . OR expression
    (39) expression -> expression . XOR expression
    (40) expression -> expression . NAND expression
    (41) expression -> expression . NOR expression
    (42) expression -> expression . XNOR expression
    (43) expression -> expression . EQUAL expression
    (2) block -> . INDENT statements DEDENT

    POWER           shift and go to state 31
    MUL             shift and go to state 32
    DIV             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MODULUS         shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    NAND            shift and go to state 40
    NOR             shift and go to state 41
    XNOR            shift and go to state 42
    EQUAL           shift and go to state 43
    INDENT          shift and go to state 53

    block                          shift and go to state 77

state 76

    (2) block -> INDENT statements DEDENT .

    IFF             reduce using rule 2 (block -> INDENT statements DEDENT .)
    DEF             reduce using rule 2 (block -> INDENT statements DEDENT .)
    SET             reduce using rule 2 (block -> INDENT statements DEDENT .)
    LOP             reduce using rule 2 (block -> INDENT statements DEDENT .)
    RET             reduce using rule 2 (block -> INDENT statements DEDENT .)
    IDENT           reduce using rule 2 (block -> INDENT statements DEDENT .)
    NEWLINE         reduce using rule 2 (block -> INDENT statements DEDENT .)
    NUMBER          reduce using rule 2 (block -> INDENT statements DEDENT .)
    STRING          reduce using rule 2 (block -> INDENT statements DEDENT .)
    BOOL            reduce using rule 2 (block -> INDENT statements DEDENT .)
    LPAREN          reduce using rule 2 (block -> INDENT statements DEDENT .)
    NOT             reduce using rule 2 (block -> INDENT statements DEDENT .)
    $end            reduce using rule 2 (block -> INDENT statements DEDENT .)
    DEDENT          reduce using rule 2 (block -> INDENT statements DEDENT .)
    ELS             reduce using rule 2 (block -> INDENT statements DEDENT .)


state 77

    (24) loop_statement -> LOP IDENT expression expression block .

    IFF             reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    DEF             reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    SET             reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    LOP             reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    RET             reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    IDENT           reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    NEWLINE         reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    NUMBER          reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    STRING          reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    BOOL            reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    LPAREN          reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    NOT             reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    $end            reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)
    DEDENT          reduce using rule 24 (loop_statement -> LOP IDENT expression expression block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 16 resolved as shift
WARNING: shift/reduce conflict for STRING in state 16 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 16 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 16 resolved as shift
WARNING: shift/reduce conflict for NOT in state 16 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 16 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 44 resolved as shift
WARNING: shift/reduce conflict for STRING in state 44 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 44 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 44 resolved as shift
WARNING: shift/reduce conflict for NOT in state 44 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 44 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 45 resolved as shift
WARNING: shift/reduce conflict for STRING in state 45 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 45 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for NOT in state 45 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 45 resolved as shift
WARNING: shift/reduce conflict for POWER in state 46 resolved as shift
WARNING: shift/reduce conflict for MUL in state 46 resolved as shift
WARNING: shift/reduce conflict for DIV in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for XOR in state 46 resolved as shift
WARNING: shift/reduce conflict for NAND in state 46 resolved as shift
WARNING: shift/reduce conflict for NOR in state 46 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 46 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for POWER in state 51 resolved as shift
WARNING: shift/reduce conflict for MUL in state 51 resolved as shift
WARNING: shift/reduce conflict for DIV in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 51 resolved as shift
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for OR in state 51 resolved as shift
WARNING: shift/reduce conflict for XOR in state 51 resolved as shift
WARNING: shift/reduce conflict for NAND in state 51 resolved as shift
WARNING: shift/reduce conflict for NOR in state 51 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 51 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 51 resolved as shift
WARNING: shift/reduce conflict for POWER in state 61 resolved as shift
WARNING: shift/reduce conflict for MUL in state 61 resolved as shift
WARNING: shift/reduce conflict for DIV in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for XOR in state 61 resolved as shift
WARNING: shift/reduce conflict for NAND in state 61 resolved as shift
WARNING: shift/reduce conflict for NOR in state 61 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for POWER in state 62 resolved as shift
WARNING: shift/reduce conflict for MUL in state 62 resolved as shift
WARNING: shift/reduce conflict for DIV in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for XOR in state 62 resolved as shift
WARNING: shift/reduce conflict for NAND in state 62 resolved as shift
WARNING: shift/reduce conflict for NOR in state 62 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for POWER in state 63 resolved as shift
WARNING: shift/reduce conflict for MUL in state 63 resolved as shift
WARNING: shift/reduce conflict for DIV in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for XOR in state 63 resolved as shift
WARNING: shift/reduce conflict for NAND in state 63 resolved as shift
WARNING: shift/reduce conflict for NOR in state 63 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 63 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for POWER in state 64 resolved as shift
WARNING: shift/reduce conflict for MUL in state 64 resolved as shift
WARNING: shift/reduce conflict for DIV in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for XOR in state 64 resolved as shift
WARNING: shift/reduce conflict for NAND in state 64 resolved as shift
WARNING: shift/reduce conflict for NOR in state 64 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for POWER in state 65 resolved as shift
WARNING: shift/reduce conflict for MUL in state 65 resolved as shift
WARNING: shift/reduce conflict for DIV in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for XOR in state 65 resolved as shift
WARNING: shift/reduce conflict for NAND in state 65 resolved as shift
WARNING: shift/reduce conflict for NOR in state 65 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 65 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for POWER in state 66 resolved as shift
WARNING: shift/reduce conflict for MUL in state 66 resolved as shift
WARNING: shift/reduce conflict for DIV in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for XOR in state 66 resolved as shift
WARNING: shift/reduce conflict for NAND in state 66 resolved as shift
WARNING: shift/reduce conflict for NOR in state 66 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for POWER in state 67 resolved as shift
WARNING: shift/reduce conflict for MUL in state 67 resolved as shift
WARNING: shift/reduce conflict for DIV in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for XOR in state 67 resolved as shift
WARNING: shift/reduce conflict for NAND in state 67 resolved as shift
WARNING: shift/reduce conflict for NOR in state 67 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for POWER in state 69 resolved as shift
WARNING: shift/reduce conflict for MUL in state 69 resolved as shift
WARNING: shift/reduce conflict for DIV in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for XOR in state 69 resolved as shift
WARNING: shift/reduce conflict for NAND in state 69 resolved as shift
WARNING: shift/reduce conflict for NOR in state 69 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 69 resolved as shift
WARNING: reduce/reduce conflict in state 11 resolved using rule (statement -> function_call)
WARNING: rejected rule (expression -> function_call) in state 11
